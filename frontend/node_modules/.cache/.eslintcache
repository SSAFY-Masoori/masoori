[{"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\index.tsx":"1","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\styles\\theme.ts":"3","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\styles\\GlobalStyle.tsx":"4","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\spendPattern\\index.tsx":"5","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\404\\index.tsx":"6","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\layouts\\DashboardLayout\\index.tsx":"7","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\loading\\index.tsx":"8","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\cardRecommend\\index.tsx":"9","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\dictionary\\index.tsx":"10","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\landing\\index.tsx":"11","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\nextSpendPattern\\index.tsx":"12","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\redirect\\index.tsx":"13","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\luck\\index.tsx":"14","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\luckContent\\index.tsx":"15","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\profile\\index.tsx":"16","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\menu\\index.tsx":"17","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\faq\\index.tsx":"18","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\crystalBall\\index.tsx":"19","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\main\\index.jsx":"20","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\states\\luckState.ts":"21","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\Queries\\useFortune.ts":"22","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\Queries\\useLuckyColor.ts":"23","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\tarotCard\\index.tsx":"24","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\textBubble\\index.tsx":"25","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\hashtag\\index.tsx":"26","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\alertModal\\index.tsx":"27","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\ghostModal\\index.tsx":"28","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\registbtn\\index.tsx":"29","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\shareModal\\index.tsx":"30","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\modal\\login\\index.tsx":"31","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\dictBtn\\index.tsx":"32","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\cardFlip\\index.tsx":"33","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\book\\index.tsx":"34","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\challengeBubble\\index.tsx":"35","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\Pokemon\\index.jsx":"36","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\donutGraph\\index.tsx":"37","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\toggle\\index.tsx":"38","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\luckAPI.ts":"39","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Mutations\\usePostGhost.ts":"40","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostCheckDuplicateEmail.ts":"41","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostSendSignUpCode.ts":"42","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostLogin.ts":"43","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostCheckSignUpCode.ts":"44","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\instance.ts":"45","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\spendAPI.ts":"46","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\userAPI.ts":"47","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useCreditCard.ts":"48","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\dictionaryAPI.ts":"49","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useAllCreditCard.ts":"50","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\menu\\Queries\\useFaqData.ts":"51","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\menu\\menuAPI.ts":"52","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\monthSpend\\index.tsx":"53","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostLogout.ts":"54","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\states\\userState.tsx":"55","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostSignUp.ts":"56","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\verifyNumberModal\\index.tsx":"57","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\main\\Mutations\\usePostConsume.ts":"58","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\main\\Mutations\\usePostSmsCheck.ts":"59","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\main\\Mutations\\usePostSms.ts":"60","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\main\\mainAPI.ts":"61","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\states\\dictionaryState.ts":"62","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useChallengeCard.ts":"63","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\Queries\\useAllUserFortune.ts":"64","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useGetAllConsume.ts":"65","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\menu\\Queries\\useUserInfo.ts":"66","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostGeneration.ts":"67","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostAlram.ts":"68","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\states\\spendState.ts":"69","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Queries\\useGetConsumeId.ts":"70","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Mutations\\usePostSSESendData.ts":"71","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Queries\\useGetConsumeRecent.ts":"72","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Queries\\useGetSSESubscribe.ts":"73","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\router\\routes.tsx":"74","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\specialSelectModal\\index.tsx":"75","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useAllChallengeCard.ts":"76","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\menu\\Mutations\\useProfileImage.ts":"77","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\settingGoals\\index.tsx":"78","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostSetGoalAmount.ts":"79","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\Queries\\useUserFortune.ts":"80","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\userLuck\\index.tsx":"81","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\App.tsx":"82","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\nonUserDictionary\\index.tsx":"83"},{"size":1028,"mtime":1696437092045,"results":"84","hashOfConfig":"85"},{"size":452,"mtime":1695718490904,"results":"86","hashOfConfig":"85"},{"size":1137,"mtime":1695718490919,"results":"87","hashOfConfig":"85"},{"size":2026,"mtime":1696405449476,"results":"88","hashOfConfig":"85"},{"size":7295,"mtime":1696538950904,"results":"89","hashOfConfig":"85"},{"size":501,"mtime":1695718490904,"results":"90","hashOfConfig":"85"},{"size":5407,"mtime":1696464672465,"results":"91","hashOfConfig":"85"},{"size":513,"mtime":1695718490904,"results":"92","hashOfConfig":"85"},{"size":11496,"mtime":1696551527340,"results":"93","hashOfConfig":"85"},{"size":14539,"mtime":1696549665153,"results":"94","hashOfConfig":"85"},{"size":13505,"mtime":1696477374947,"results":"95","hashOfConfig":"85"},{"size":5508,"mtime":1695718490904,"results":"96","hashOfConfig":"85"},{"size":335,"mtime":1696228465960,"results":"97","hashOfConfig":"85"},{"size":2655,"mtime":1696479184084,"results":"98","hashOfConfig":"85"},{"size":4620,"mtime":1696479426984,"results":"99","hashOfConfig":"85"},{"size":8755,"mtime":1696425926626,"results":"100","hashOfConfig":"85"},{"size":3289,"mtime":1696478348299,"results":"101","hashOfConfig":"85"},{"size":3581,"mtime":1696421544795,"results":"102","hashOfConfig":"85"},{"size":12164,"mtime":1696425431633,"results":"103","hashOfConfig":"85"},{"size":17943,"mtime":1696524764217,"results":"104","hashOfConfig":"85"},{"size":921,"mtime":1696516559190,"results":"105","hashOfConfig":"85"},{"size":241,"mtime":1696407319143,"results":"106","hashOfConfig":"85"},{"size":256,"mtime":1695718490763,"results":"107","hashOfConfig":"85"},{"size":2527,"mtime":1696418487394,"results":"108","hashOfConfig":"85"},{"size":1998,"mtime":1696425663236,"results":"109","hashOfConfig":"85"},{"size":554,"mtime":1695718490904,"results":"110","hashOfConfig":"85"},{"size":6562,"mtime":1696425546951,"results":"111","hashOfConfig":"85"},{"size":4116,"mtime":1695718490904,"results":"112","hashOfConfig":"85"},{"size":1365,"mtime":1696418487394,"results":"113","hashOfConfig":"85"},{"size":3385,"mtime":1696418487394,"results":"114","hashOfConfig":"85"},{"size":22353,"mtime":1696418487392,"results":"115","hashOfConfig":"85"},{"size":905,"mtime":1696418487392,"results":"116","hashOfConfig":"85"},{"size":2081,"mtime":1695718490888,"results":"117","hashOfConfig":"85"},{"size":5861,"mtime":1695718490888,"results":"118","hashOfConfig":"85"},{"size":2025,"mtime":1696435382640,"results":"119","hashOfConfig":"85"},{"size":3455,"mtime":1696478144933,"results":"120","hashOfConfig":"85"},{"size":2615,"mtime":1696404302084,"results":"121","hashOfConfig":"85"},{"size":4221,"mtime":1695723972556,"results":"122","hashOfConfig":"85"},{"size":1126,"mtime":1695718490763,"results":"123","hashOfConfig":"85"},{"size":425,"mtime":1695718490763,"results":"124","hashOfConfig":"85"},{"size":592,"mtime":1695718490763,"results":"125","hashOfConfig":"85"},{"size":547,"mtime":1695718490763,"results":"126","hashOfConfig":"85"},{"size":430,"mtime":1695718490763,"results":"127","hashOfConfig":"85"},{"size":556,"mtime":1695718490763,"results":"128","hashOfConfig":"85"},{"size":1011,"mtime":1696504099187,"results":"129","hashOfConfig":"85"},{"size":2041,"mtime":1696398859877,"results":"130","hashOfConfig":"85"},{"size":4413,"mtime":1696404302082,"results":"131","hashOfConfig":"85"},{"size":305,"mtime":1695718490763,"results":"132","hashOfConfig":"85"},{"size":2386,"mtime":1696473109525,"results":"133","hashOfConfig":"85"},{"size":314,"mtime":1695726385541,"results":"134","hashOfConfig":"85"},{"size":241,"mtime":1695718490763,"results":"135","hashOfConfig":"85"},{"size":993,"mtime":1696322365953,"results":"136","hashOfConfig":"85"},{"size":1953,"mtime":1695778783688,"results":"137","hashOfConfig":"85"},{"size":357,"mtime":1695718490763,"results":"138","hashOfConfig":"85"},{"size":262,"mtime":1696516542625,"results":"139","hashOfConfig":"85"},{"size":439,"mtime":1696159082920,"results":"140","hashOfConfig":"85"},{"size":7280,"mtime":1696518929813,"results":"141","hashOfConfig":"85"},{"size":433,"mtime":1696158939670,"results":"142","hashOfConfig":"85"},{"size":556,"mtime":1696249264531,"results":"143","hashOfConfig":"85"},{"size":506,"mtime":1696249264531,"results":"144","hashOfConfig":"85"},{"size":1143,"mtime":1696249264531,"results":"145","hashOfConfig":"85"},{"size":667,"mtime":1696516543876,"results":"146","hashOfConfig":"85"},{"size":398,"mtime":1696468041368,"results":"147","hashOfConfig":"85"},{"size":645,"mtime":1696469343611,"results":"148","hashOfConfig":"85"},{"size":355,"mtime":1696229896020,"results":"149","hashOfConfig":"85"},{"size":373,"mtime":1696249264531,"results":"150","hashOfConfig":"85"},{"size":377,"mtime":1696248611308,"results":"151","hashOfConfig":"85"},{"size":352,"mtime":1696248611308,"results":"152","hashOfConfig":"85"},{"size":1572,"mtime":1696516581715,"results":"153","hashOfConfig":"85"},{"size":287,"mtime":1696249264546,"results":"154","hashOfConfig":"85"},{"size":449,"mtime":1696249264545,"results":"155","hashOfConfig":"85"},{"size":641,"mtime":1696395465390,"results":"156","hashOfConfig":"85"},{"size":267,"mtime":1696249264548,"results":"157","hashOfConfig":"85"},{"size":3406,"mtime":1696472470982,"results":"158","hashOfConfig":"85"},{"size":3052,"mtime":1696428935332,"results":"159","hashOfConfig":"85"},{"size":379,"mtime":1696315436188,"results":"160","hashOfConfig":"85"},{"size":462,"mtime":1696322711905,"results":"161","hashOfConfig":"85"},{"size":4083,"mtime":1696518929810,"results":"162","hashOfConfig":"85"},{"size":523,"mtime":1696404302082,"results":"163","hashOfConfig":"85"},{"size":261,"mtime":1696407315979,"results":"164","hashOfConfig":"85"},{"size":2641,"mtime":1696479167362,"results":"165","hashOfConfig":"85"},{"size":783,"mtime":1696478571023,"results":"166","hashOfConfig":"85"},{"size":15100,"mtime":1696549477205,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},"zzn9rl",{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"171"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"171"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"171"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"171"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"171"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"235"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"171"},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"171"},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"287"},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"297","messages":"298","suppressedMessages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"303","messages":"304","suppressedMessages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"309","messages":"310","suppressedMessages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"312","messages":"313","suppressedMessages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"171"},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"171"},{"filePath":"323","messages":"324","suppressedMessages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"171"},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"336","messages":"337","suppressedMessages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"339","messages":"340","suppressedMessages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"342","messages":"343","suppressedMessages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"345","messages":"346","suppressedMessages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","suppressedMessages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"396"},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"396"},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"171"},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"410","messages":"411","suppressedMessages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"413","messages":"414","suppressedMessages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"425","messages":"426","suppressedMessages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"428","messages":"429","suppressedMessages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"431","messages":"432","suppressedMessages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\index.tsx",[],[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\reportWebVitals.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\styles\\theme.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\styles\\GlobalStyle.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\spendPattern\\index.tsx",["434"],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\404\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\layouts\\DashboardLayout\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\loading\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\cardRecommend\\index.tsx",["435"],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\dictionary\\index.tsx",["436","437","438"],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\landing\\index.tsx",["439","440","441","442","443"],[],"import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport LandingPage from \"@/assets/img/LandingPageTest.jpg\";\r\nimport LandingMainLogo from \"@/assets/img/LandingMainLogo.png\";\r\nimport LandingTarot from \"@/assets/img/landingImage/landingTarot.png\";\r\nimport CreditCards from \"@/assets/img/CreditCards.png\";\r\nimport Trophy from \"@/assets/img/Trophy.png\";\r\nimport Bottles from \"@/assets/img/Bottles.png\";\r\nimport CardFlip from \"@/components/cardFlip\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport LoadingPage from \"../loading\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"@/styles.font.css\" />;\r\n\r\nconst ToTarotContext = `귀여운 인간 손님이 왔네? 보아하니 고민이 있나본데...\r\n아하, 알겠다! 요즘 소비가 늘어 걱정인 거구나? 뾰족한 수를 찾고 싶어? 🔮\r\n간단한 해결책은 나오기 어렵지만...... 어쩌면 내가 도움이 될 지도 모르지.\r\n앞으로 매주 나에게 방문하도록 하렴.\r\n정말로 습관을 바꾸고 싶다면, 매주 타로를 보러 오는 것 정도는 괜찮지 않니?\r\n내 타로점은 쉽게 볼 수 있는 게 아니란다.\r\n네가 일주일 간 소비한 내용을 요정들에게 알아오라고 할게.\r\n그 내용을 내가 확인한 후에 네 타로점을 봐줄 거야.\r\n그림을 잘 그리는 요정도 있는데, 그 친구가 오직 너만을 위한 타로카드도 그려줄 거란다.\r\n후후, 꽤나 기대되지 않니?`;\r\n\r\nconst RecommendContext = `아하, 인간 친구여! 네가 쓰는 돈의 이야기가 내 마법의 구슬을 통해 나타나네.🔮✨구슬에 나타난 소비패턴으로 특별한 카드를 찾아냈단다. 이 카드는 너의 지출에 따른 장점을 최대한 활용해, 너의 돈 주머니를 더욱 풍요롭게 만들어 줄 것이야.그리고 그 카드가 당신에게 가져다 줄 기적 같은 혜택들... 이미 요정들이 네게 보여주기 위해 그 혜택들을 준비 중이야. 🧚그리고 잊지마, 내가 추천하는 카드는 단순한 플라스틱 조각이 아니야. 그것은 너의 지출과 함께 네 인생의 여정에 빛나는 별이 될 수도 있단다. ✨후후, 마법의 세계에서 가장 완벽한 카드로 네 마음을 빛내 줄 준비가 되었니? 그렇다면, 지금 바로 그 빛을 찾아보도록 하자!\" ‍🔮`;\r\n\r\nconst Chellange = `아, 다시 왔구나, 소중한 인간이여. 소비 챌린지에 대한 신비로운 이야기를 듣고 싶어?🔮 이 챌린지는 단순한 과제가 아니야. 이것은 당신의 지출 습관에 특별한 변화를 가져다 줄 마법의 챌린지란다. 소비 습관이 조금 허술해 보이는 것 같다면, 이 챌린지는 당신에게 희망의 빛을 선사할거야 별빛처럼 반짝이는 진정한 성취를 느낄 수 있을 테니까. 그리고 두려워 하지마. 요정들이 당신의 길을 밝혀줄 거란다. 후후, 별들이 반짝이는 밤하늘 아래, 우리의 소비 챌린지 여행을 함께 시작해볼까? ✨🌟`;\r\n\r\nconst FinanceLuck = `아하, 당신의 금전운을 엿보고 싶은 거구나? 🔮\r\n\r\n주머니 속의 동전들이 너에게 무슨 이야기를 할까... 하늘에서 내려오는 별들의 빛처럼, 너의 재물의 흐름도 반짝거릴지도 모르지. 내 앞에 넓게 펼쳐진 타로카드들 중에서, 너의 미래의 재물을 가늠할 수 있는 카드를 골라줄게.\r\n\r\n하지만, 이런 운명도 네가 스스로의 노력과 선택으로 만들어가는 것이란 것을 잊지 말아야 해. 타로는 가능성을 제시해주니까, 그것이 반드시 일어난다는 것을 보장하지 않는다는 점, 기억하렴.\r\n그럼, 당신의 재물과 행운이 넘치길 바라며...🔮🌟`;\r\n\r\nconst Container = styled.div`\r\n  background-image: url(${LandingPage});\r\n  background-size: cover; /* 이미지를 화면 크기에 맞게 조절 */\r\n  background-repeat: no-repeat; /* 이미지 반복 방지 */\r\n  background-attachment: scroll; /* 배경 스크롤 허용 */\r\n  background-position: center center; /* 이미지 중앙 정렬 */\r\n  height: 585vh; /* 화면 높이만큼 설정 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst MainPage1 = styled.div`\r\n  height: 100vh;\r\n  width: 75%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst MainLogo = styled.img`\r\n  height: 75vh;\r\n  width: 85%;\r\n`;\r\n\r\nconst MainComment = styled.div`\r\n  color: #fae7a9;\r\n  text-shadow: 1px 1px 10px rgba(255, 255, 255, 0.7);\r\n  font-family: \"PyeongChangPeace\";\r\n  font-size: 32px;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  line-height: normal;\r\n  letter-spacing: 3.2px;\r\n`;\r\n\r\nconst MainPages = styled.div`\r\n  height: 100vh;\r\n  width: 75%;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 70%;\r\n`;\r\n\r\nconst ToGoContent = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 70%;\r\n`;\r\n\r\nconst ShiftLeft = styled.div`\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n  width: 91%;\r\n`;\r\n\r\nconst Witch = styled.div`\r\n  margin-bottom: 10px;\r\n  height: 7vh;\r\n  width: 142px;\r\n  border-radius: 19px;\r\n  background: rgba(77, 27, 69, 0.5);\r\n  box-shadow:\r\n    0px 5px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    5px 0px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    0px -5px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    -5px 0px 10px 0px rgba(255, 255, 255, 0.1) inset;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #fff;\r\n  font-family: \"Pretendard\";\r\n  font-size: 20px;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  line-height: 32px; /* 106.667% */\r\n`;\r\n\r\nconst Context = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 19px;\r\n  background: rgba(77, 27, 69, 0.5);\r\n  box-shadow:\r\n    0px 5px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    5px 0px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    0px -5px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    -5px 0px 10px 0px rgba(255, 255, 255, 0.1) inset;\r\n  height: 45vh;\r\n  width: 91%;\r\n  color: #fff;\r\n  font-family: \"Pretendard\";\r\n  font-size: 19px;\r\n  font-style: normal;\r\n  font-weight: medium;\r\n  line-height: 32px; /* 152.381% */\r\n  padding: 37px;\r\n`;\r\n\r\nconst Page3Context = styled(Context)`\r\n  padding-top: 180px;\r\n  padding-bottom: 180px;\r\n`;\r\n\r\nconst Page4Context = styled(Context)`\r\n  height: 39vh;\r\n  padding-left: 40px;\r\n  padding-right: 40px;\r\n`;\r\n\r\nconst Page5Context = styled(Context)`\r\n  height: 40vh;\r\n  padding-left: 40px;\r\n  padding-right: 40px;\r\n`;\r\n\r\nconst Titles = styled.div`\r\n  color: #fff;\r\n  font-family: \"PyeongChangPeace\";\r\n  font-size: 45px;\r\n  text-align: left;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst ShiftRightTitles = styled(Titles)`\r\n  width: 60%;\r\n  margin-left: 33.75vw;\r\n  align-items: center;\r\n`;\r\n\r\nconst Page24Left = styled.div`\r\n  height: 100%;\r\n  width: 60%;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Page35Right = styled(Page24Left)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: end;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Page2Photo = styled.div`\r\n  height: 100%;\r\n  width: 40%;\r\n  background-image: url(${LandingTarot});\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n`;\r\n\r\nconst Page3Photo = styled.div`\r\n  height: 100%;\r\n  width: 40%;\r\n  background-image: url(${CreditCards});\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n`;\r\n\r\nconst Page4Photo = styled.div`\r\n  height: 100%;\r\n  width: 40%;\r\n  background-image: url(${Trophy});\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n`;\r\n\r\nconst Page5Photo = styled.div`\r\n  height: 100%;\r\n  width: 40%;\r\n  background-image: url(${Bottles});\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n`;\r\n\r\nconst SelectToGo = styled.div`\r\n  padding: 10px;\r\n  height: 20%;\r\n  width: 50vw;\r\n  margin-bottom: 30px;\r\n  color: #fff;\r\n  font-family: \"PyeongChangPeace\";\r\n  font-size: 45px;\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  border-radius: 19px;\r\n  background: rgba(110, 39, 98, 0.5);\r\n  box-shadow:\r\n    0px 5px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    5px 0px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    0px -5px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    -5px 0px 10px 0px rgba(255, 255, 255, 0.1) inset;\r\n\r\n  transition: background-color 0.3s; /* hover 효과를 위한 transition 설정 */\r\n\r\n  &:hover {\r\n    background-color: rgba(162, 11, 137, 0.8); /* hover 시 배경색 변경 */\r\n  }\r\n`;\r\n\r\nconst CardSection = styled.div`\r\n  display: flex;\r\n  height: 62vh;\r\n  width: 100%;\r\n  justify-content: center; /* 중앙 정렬 */\r\n  gap: 300px; /* 카드 사이의 간격 설정 */\r\n  margin-left: 4px;\r\n`;\r\n\r\nconst CardBox = styled.div`\r\n  width: 109%;\r\n  height: 100%;\r\n  border-radius: 19px;\r\n  background: rgba(110, 39, 98, 0.5);\r\n  box-shadow:\r\n    0px 5px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    5px 0px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    0px -5px 10px 0px rgba(255, 255, 255, 0.1) inset,\r\n    -5px 0px 10px 0px rgba(255, 255, 255, 0.1) inset;\r\n`;\r\n\r\nconst Landing: React.FC = () => {\r\n  const [selectedCard, setSelectedCard] = useState<number | null>(null);\r\n  const [isLogin, setIsLogin] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Check if there is an accessToken in localStorage\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    if (accessToken) {\r\n      setIsLogin(\"true\"); // accessToken이 있으면 isLogin을 true로 설정\r\n    }\r\n  }, []);\r\n\r\n  const navigateLuck = () => {\r\n    if (isLogin === \"true\") {\r\n      navigate(\"/userluck\");\r\n    } else {\r\n      toast.info(\"비로그인 시 카드 저장 불가\");\r\n      setTimeout(() => {\r\n        navigate(\"/luck\");\r\n      }, 1000); // 1초 뒤에 \"/luck\"으로 이동\r\n    }\r\n  };\r\n\r\n  const handleCardClick = (index: number) => {\r\n    if (selectedCard === null) {\r\n      // 클릭한 카드를 선택하고 다른 카드의 클릭 가능 상태를 비활성화\r\n      setSelectedCard(index);\r\n      console.log(\"성공\");\r\n\r\n      if (index === 0) {\r\n        // 인덱스별로 어디로 가는지 router 설정해주기\r\n        setTimeout(() => {\r\n          navigate(\"/spend\");\r\n        }, 1500);\r\n      } else if (index === 1) {\r\n        setTimeout(() => {\r\n          navigate(\"/spend\");\r\n        }, 1500);\r\n      } else if (index === 2) {\r\n        setTimeout(() => {\r\n          navigate(\"/dictionary\");\r\n        }, 1500);\r\n      } else if (index === 3) {\r\n        setTimeout(() => {\r\n          navigate(\"/luck\");\r\n        }, 1500);\r\n      }\r\n    }\r\n  };\r\n  const [backgroundReady, setBackgroundReady] = useState(false);\r\n  useEffect(() => {\r\n    const img = new Image();\r\n    img.src = LandingPage;\r\n    img.onload = () => {\r\n      setBackgroundReady(true);\r\n    };\r\n  }, []);\r\n\r\n  const isClickable = (index: number) => {\r\n    return selectedCard === null || selectedCard === index;\r\n  };\r\n\r\n  return backgroundReady ? (\r\n    <Container>\r\n      <MainPage1>\r\n        <MainLogo src={LandingMainLogo} />\r\n        <MainComment>•──☾ 소비패턴 분석을 통한 타로카드 생성 ☽──•</MainComment>\r\n      </MainPage1>\r\n      <MainPages>\r\n        <Titles>\r\n          <p>나의 소비 패턴을 타로카드로</p>\r\n        </Titles>\r\n        <Content>\r\n          <Page24Left>\r\n            <Witch>🌟 마녀 🌟</Witch>\r\n            <Context>{ToTarotContext}</Context>\r\n          </Page24Left>\r\n          <Page2Photo />\r\n        </Content>\r\n      </MainPages>\r\n      <MainPages>\r\n        <ShiftRightTitles>\r\n          <p>마녀가 추천해주는 나의 카드</p>\r\n        </ShiftRightTitles>\r\n        <Content>\r\n          <Page3Photo />\r\n          <Page35Right>\r\n            <ShiftLeft>\r\n              <Witch>🌟 마녀 🌟</Witch>\r\n            </ShiftLeft>\r\n            <Page3Context>{RecommendContext}</Page3Context>\r\n          </Page35Right>\r\n        </Content>\r\n      </MainPages>\r\n      <MainPages>\r\n        <Titles>\r\n          <p>챌린지를 통해 소비습관을 교정</p>\r\n        </Titles>\r\n        <Content>\r\n          <Page24Left>\r\n            <Witch>🌟 마녀 🌟</Witch>\r\n            <Page4Context>{Chellange}</Page4Context>\r\n          </Page24Left>\r\n          <Page4Photo />\r\n        </Content>\r\n      </MainPages>\r\n      <MainPages>\r\n        <ShiftRightTitles>\r\n          <p>나의 금전운에 대해 알아보자</p>\r\n        </ShiftRightTitles>\r\n        <Content>\r\n          <Page5Photo />\r\n          <Page35Right>\r\n            <ShiftLeft>\r\n              <Witch>🌟 마녀 🌟</Witch>\r\n            </ShiftLeft>\r\n            <Page5Context>{FinanceLuck}</Page5Context>\r\n          </Page35Right>\r\n        </Content>\r\n      </MainPages>\r\n      <MainPages>\r\n        <ToGoContent>\r\n          <SelectToGo onClick={navigateLuck}>\r\n            🌟 오늘의 금전운 보러가기 🌟\r\n          </SelectToGo>\r\n        </ToGoContent>\r\n      </MainPages>\r\n    </Container>\r\n  ) : (\r\n    <LoadingPage />\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\nextSpendPattern\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\redirect\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\luck\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\luckContent\\index.tsx",["444"],[],"import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TextBubble from \"@/components/textBubble\";\r\nimport { StyledTextBubbleProps } from \"@/types/luckType\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { luckInfoState } from \"@/states/luckState\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport TarotCard from \"@/components/tarotCard\";\r\nimport CrystalBallPage from \"@/pages/crystalBall\";\r\n\r\nimport background from \"@/assets/img/background/capetBackground.jpg\";\r\nimport headerDecorationLeft from \"@/assets/img/headerDecorationLeft.png\";\r\nimport headerDecorationRight from \"@/assets/img/headerDecorationRight.png\";\r\nimport cardFront from \"@/assets/img/tarotCard/tarotCardFront.png\";\r\n\r\nconst PageContainer = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: url(${background});\r\n  background-size: cover;\r\n  background-attachment: scroll;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n  margin-top: 6%;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  color: #fdf1f1;\r\n  font-family: \"Brodies\";\r\n  font-size: 3.5vw;\r\n  font-weight: 400;\r\n  margin: 0px 4%;\r\n`;\r\n\r\nconst ContentContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center; /* 수평 중앙 정렬 */\r\n  align-items: center; /* 수직 중앙 정렬 */\r\n  flex-direction: row; /* 수평 정렬로 변경 */\r\n  height: 75%;\r\n  width: 100%;\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  padding: 70px 55px;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  padding: 25px 0px 25px 0px;\r\n`;\r\n\r\nconst TextBubbleContainer = styled.div`\r\n  margin-bottom: 20px; /* 각 텍스트 버블 사이의 간격 조정 */\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 20%; /* 이미지의 너비를 화면 너비의 10%로 조정 */\r\n`;\r\n\r\nconst TitleContainer = styled.div`\r\n  padding: 0px 0px 0px 55px;\r\n  text-align: left;\r\n`;\r\n\r\nconst LuckContentPage = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const luckInfo = useRecoilValue(luckInfoState);\r\n  const navigate = useNavigate();\r\n\r\n  const titleTextBubbleProps: StyledTextBubbleProps = {\r\n    text: \"🌟 마녀 🌟\",\r\n    width: \"136PX\",\r\n    background: \"#4D1B2D80\",\r\n    opacity: \"1\",\r\n    paddingLeftRight: \"28px\",\r\n    paddingTopBottom: \"15px\",\r\n    borderRadius: \"10px\",\r\n    hoverable: false,\r\n  };\r\n\r\n  console.log(luckInfo.description.split(\"\\n\").join(\"<br>\"));\r\n\r\n  const contentTextBubbleProps: StyledTextBubbleProps = {\r\n    text: luckInfo.description,\r\n    width: \"588px\", // \"px\" 대문자로 변경\r\n    background: \"#4D1B2D80\",\r\n    opacity: \"1\",\r\n    paddingLeftRight: \"40px\",\r\n    paddingTopBottom: \"40px\",\r\n    borderRadius: \"20px\",\r\n    hoverable: false,\r\n  };\r\n\r\n  const crystalTextBubbleProps: StyledTextBubbleProps = {\r\n    text: `🔮 수정구에 손을 올린다 🔮`,\r\n    width: \"588PX\",\r\n    background: \"#4D1B2D80\",\r\n    opacity: \"1\",\r\n    paddingLeftRight: \"40px\",\r\n    paddingTopBottom: \"20px\",\r\n    borderRadius: \"20px\",\r\n    hoverable: true,\r\n  };\r\n\r\n  return (\r\n    <PageContainer>\r\n      <Header>\r\n        <Image src={headerDecorationLeft} alt=\"Background\" />\r\n        <Title>The Witch’s Answer</Title>\r\n        <Image src={headerDecorationRight} alt=\"Background\" />\r\n      </Header>\r\n      <ContentContainer>\r\n        <CardContainer>\r\n          <TarotCard\r\n            width=\"300px\"\r\n            height=\"440px\"\r\n            cardWidth=\"100%\"\r\n            cardSrc={cardFront}\r\n            imageSrc={luckInfo.imagePath}\r\n            bottomImageWidth=\"100%\"\r\n            text={luckInfo.name}\r\n            fontsize=\"20px\"\r\n            bottom=\"1rem\"\r\n          ></TarotCard>\r\n        </CardContainer>\r\n        <TitleContainer>\r\n          <ContentWrapper>\r\n            <TextBubbleContainer>\r\n              <TextBubble {...titleTextBubbleProps} />\r\n            </TextBubbleContainer>\r\n            <TextBubbleContainer>\r\n              <TextBubble\r\n                {...contentTextBubbleProps}\r\n                text={luckInfo.description.replace(/\\\\n/g, \"<br/>\")}\r\n              />\r\n            </TextBubbleContainer>\r\n            <TextBubbleContainer>\r\n              <TextBubble\r\n                {...crystalTextBubbleProps}\r\n                onClick={() => setIsModalOpen(!isModalOpen)}\r\n              />\r\n            </TextBubbleContainer>\r\n          </ContentWrapper>\r\n        </TitleContainer>\r\n      </ContentContainer>\r\n      {isModalOpen && <CrystalBallPage />}\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default LuckContentPage;\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\profile\\index.tsx",["445"],[],"import styled from \"styled-components\"; // Import styled-components\r\nimport ToggleSwitch from \"@/components/toggle\";\r\nimport DonutChart from \"@/components/donutGraph\";\r\nimport cardFrontImage from \"../../assets/img/cardFront.png\";\r\nimport { usePostGeneration } from \"@/apis/user/Mutations/usePostGeneration\";\r\nimport { usePostAlram } from \"@/apis/user/Mutations/usePostAlram\";\r\nimport SettingFinancialGoals from \"@/components/settingGoals\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { settingModalOpenState } from \"@/states/spendState\";\r\nimport { getUserInfo } from \"@/apis/menu/menuAPI\";\r\nimport { useState, useEffect } from \"react\";\r\nimport TarotCard from \"@/components/tarotCard\";\r\n\r\nimport tarotCardFront from \"@/assets/img/tarotCard/tarotCardFront.png\";\r\n\r\nconst Container = styled.div`\r\n  border-radius: 25px;\r\n  -webkit-box-shadow: 0 0 70px -10px rgba(0, 0, 0, 0.2);\r\n  box-shadow: 0 0 70px -10px rgba(0, 0, 0, 0.2);\r\n  background-color: #a37c9b;\r\n  color: #ffffff;\r\n  height: 520px;\r\n  width: 800px;\r\n`;\r\n\r\nconst WeekContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 25px;\r\n`;\r\n\r\nconst FooterText = styled.p`\r\n  color: rgba(255, 255, 255, 0.6);\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst WeatherSide = styled.div`\r\n  position: relative;\r\n  height: 100%;\r\n  border-radius: 25px;\r\n  background: url(${cardFrontImage}) no-repeat;\r\n  background-size: cover;\r\n  width: 345px;\r\n  -webkit-box-shadow: 0 0 20px -10px rgba(0, 0, 0, 0.2);\r\n  box-shadow: 0 0 20px -10px rgba(0, 0, 0, 0.2);\r\n  -webkit-transition: -webkit-transform 300ms ease;\r\n  transition: -webkit-transform 300ms ease;\r\n  -o-transition: transform 300ms ease;\r\n  transition: transform 300ms ease;\r\n  transition:\r\n    transform 300ms ease,\r\n    -webkit-transform 300ms ease;\r\n  -webkit-transform: translateZ(0) scale(1.02) perspective(1000px);\r\n  transform: translateZ(0) scale(1.02) perspective(1000px);\r\n  float: left;\r\n`;\r\n\r\nconst WeatherGradient = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  border-radius: 25px;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst InfoSide = styled.div`\r\n  position: relative;\r\n  float: left;\r\n  height: 100%;\r\n  padding-top: 25px;\r\n  width: 56.8%;\r\n`;\r\n\r\nconst TodayInfo = styled.div`\r\n  padding: 15px;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst InfoTitle = styled.div`\r\n  color: #fff;\r\n  font-family: \"Pyeongchangpeace\";\r\n  font-size: 32px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst LocationContainer = styled.div`\r\n  padding: 25px 35px;\r\n`;\r\n\r\n// Define other styled-components similarly for the remaining classes\r\n\r\nconst ProfilePage = () => {\r\n  //마이페이지 소비카드 생성 연동 변경 API 시작\r\n\r\n  const ChangeGeneration = usePostGeneration();\r\n\r\n  const handleChangeGeneration = async () => {\r\n    try {\r\n      const result = await ChangeGeneration.mutateAsync();\r\n      console.log(result);\r\n    } catch (error) {\r\n      console.error(\"소비카드 생성 연동 변경에 실패했습니다.\", error);\r\n    }\r\n  };\r\n\r\n  //마이페이지 소비카드 생성 연동 변경 API 종료\r\n\r\n  //마이페이지 sms 알림 연동 변경 API 시작\r\n\r\n  const ChangeAlram = usePostAlram();\r\n\r\n  const handleChangeAlram = async () => {\r\n    try {\r\n      const result = await ChangeAlram.mutateAsync();\r\n      console.log(result);\r\n    } catch (error) {\r\n      console.error(\"sms 알림 연동 변경에 실패했습니다.\", error);\r\n    }\r\n  };\r\n\r\n  //마이페이지 sms 알림 연동 변경 API 종료\r\n\r\n  interface UserData {\r\n    imagePath?: string | undefined;\r\n    smsAlarm?: boolean;\r\n    cardGeneration?: boolean;\r\n    dailySpending?: number;\r\n    weeklySpending?: number;\r\n    monthlySpending?: number;\r\n    monthlySpendingGoal?: number;\r\n    isAuthenticated?: boolean;\r\n  }\r\n\r\n  const [userInfo, setUserInfo] = useState<UserData>({\r\n    imagePath: \"\",\r\n    smsAlarm: false,\r\n    cardGeneration: false,\r\n    dailySpending: 0,\r\n    weeklySpending: 0,\r\n    monthlySpending: 0,\r\n    monthlySpendingGoal: 0,\r\n    isAuthenticated: false,\r\n  });\r\n\r\n  const [isSettingOpen, setIsSettingOpen] = useRecoilState(\r\n    settingModalOpenState\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const userData = await getUserInfo();\r\n        setUserInfo({\r\n          imagePath: userData.imagePath ? userData.imagePath : \"\",\r\n          smsAlarm: userData.smsAlarm ? userData.smsAlarm : false,\r\n          cardGeneration: userData.cardGeneration\r\n            ? userData.cardGeneration\r\n            : false,\r\n          dailySpending: userData.dailySpending ? userData.dailySpending : 0,\r\n          weeklySpending: userData.weeklySpending ? userData.weeklySpending : 0,\r\n          monthlySpending: userData.monthlySpending\r\n            ? userData.monthlySpending\r\n            : 0,\r\n          monthlySpendingGoal: userData.monthlySpendingGoal\r\n            ? userData.monthlySpendingGoal\r\n            : 0,\r\n          isAuthenticated: userData.isAuthenticated\r\n            ? userData.isAuthenticated\r\n            : false,\r\n        });\r\n      } catch (error) {\r\n        console.error(\"데이터 가져오기 실패:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [isSettingOpen]);\r\n\r\n  console.log(userInfo);\r\n\r\n  return (\r\n    <Container>\r\n      <WeatherSide>\r\n        <TarotCard\r\n          width=\"347px\"\r\n          height=\"500px\"\r\n          cardWidth=\"100%\"\r\n          cardSrc={tarotCardFront}\r\n          imageSrc={userInfo.imagePath || \"\"}\r\n          bottomImageWidth=\"100%\"\r\n          text=\"MY PROFILE\"\r\n          fontsize=\"20px\"\r\n          bottom=\"1.2rem\"\r\n        ></TarotCard>\r\n      </WeatherSide>\r\n      <InfoSide>\r\n        <TodayInfo>\r\n          <InfoTitle>Wallets</InfoTitle>\r\n        </TodayInfo>\r\n        <WeekContainer\r\n          onClick={() => {\r\n            setIsSettingOpen(!isSettingOpen);\r\n          }}\r\n        >\r\n          <DonutChart\r\n            value={Math.round(\r\n              (userInfo.dailySpending! / (userInfo.monthlySpendingGoal! / 30)) *\r\n                100\r\n            )}\r\n            valuelabel=\"Day\"\r\n            size={115}\r\n            strokewidth={15}\r\n          />\r\n          <DonutChart\r\n            value={Math.round(\r\n              (userInfo.weeklySpending! / (userInfo.monthlySpendingGoal! / 4)) *\r\n                100\r\n            )}\r\n            valuelabel=\"WEEK\"\r\n            size={115}\r\n            strokewidth={15}\r\n          />\r\n          <DonutChart\r\n            value={Math.round(\r\n              (userInfo.monthlySpending! / userInfo.monthlySpendingGoal!) * 100\r\n            )}\r\n            valuelabel=\"MONTH\"\r\n            size={115}\r\n            strokewidth={15}\r\n          />\r\n        </WeekContainer>\r\n        <LocationContainer>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n            onClick={() => {\r\n              handleChangeAlram();\r\n            }}\r\n          >\r\n            <p\r\n              style={{ marginRight: \"38px\", fontSize: \"20px\", fontWeight: 700 }}\r\n            >\r\n              CARD\r\n            </p>\r\n            <ToggleSwitch\r\n              textOn=\"문자 연동 취소하기\"\r\n              textOff=\"문자 연동 등록하기\"\r\n              backgroundImage=\"https://assets.codepen.io/4175254/boo-face.png\"\r\n              backgroundColor=\"#FFF\"\r\n              checked={userInfo.smsAlarm!}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{ display: \"flex\", alignItems: \"center\" }}\r\n            onClick={() => {\r\n              handleChangeGeneration();\r\n            }}\r\n          >\r\n            <p\r\n              style={{ marginRight: \"30px\", fontSize: \"20px\", fontWeight: 700 }}\r\n            >\r\n              ALERT\r\n            </p>\r\n            <ToggleSwitch\r\n              textOn=\"카드 연동 취소하기\"\r\n              textOff=\"카드 연동 등록하기\"\r\n              backgroundImage=\"https://assets.codepen.io/4175254/boo-face.png\"\r\n              backgroundColor=\"#FFF\"\r\n              checked={userInfo.cardGeneration!}\r\n            />\r\n          </div>\r\n        </LocationContainer>\r\n        <div>\r\n          <FooterText>\r\n            ※ 사용 카드와 연동하면 매주 분석 결과 타로가 자동으로 생성됩니다.\r\n          </FooterText>\r\n          <FooterText>\r\n            ※ 카카오 계정을 연동하면 매주 분석 결과를 알림으로 보내드립니다.\r\n          </FooterText>\r\n        </div>\r\n      </InfoSide>\r\n      {isSettingOpen ? (\r\n        <SettingFinancialGoals\r\n          monthlySpendingGoal={userInfo.monthlySpendingGoal! / 10000}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\menu\\index.tsx",["446"],[],"import React, { useState } from \"react\";\r\nimport ProfilePage from \"@/pages/profile\";\r\nimport styled from \"styled-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport menuTitle from \"../../assets/img/menuTitle.png\";\r\nimport { usePostLogout } from \"@/apis/user/Mutations/usePostLogout\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { settingModalOpenState } from \"@/states/spendState\";\r\n\r\nconst PageContainer = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: #a37c9b;\r\n  background-size: cover;\r\n  background-attachment: scroll;\r\n`;\r\n\r\nconst Backdrop = styled.div<{ isOpen: boolean }>`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.7); /* Semi-transparent black background */\r\n  display: ${(props) => (props.isOpen ? \"block\" : \"none\")};\r\n  z-index: 1;\r\n`;\r\n\r\n// Create a modal container\r\nconst ModalContainer = styled.div<{ isOpen: boolean }>`\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  padding: 20px;\r\n  display: ${(props) => (props.isOpen ? \"block\" : \"none\")};\r\n  z-index: 2;\r\n`;\r\n\r\nconst MenuTitle = styled.div`\r\n  background: url(${menuTitle}) no-repeat;\r\n  background-size: contain;\r\n  margin-top: 5rem;\r\n  height: 300px;\r\n  width: 550px;\r\n`;\r\n\r\nconst MenuItem = styled.div`\r\n  /* Style for menu items */\r\n  padding: 10px;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease; /* Smooth transition for background color */\r\n  color: #fff;\r\n\r\n  &:hover {\r\n    background-color: #95648b; /* Change the background color on hover */\r\n  }\r\n`;\r\n\r\nconst MenuPage = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [isSettingOpen, setIsSettingOpen] = useRecoilState(\r\n    settingModalOpenState\r\n  );\r\n\r\n  const openModal = () => {\r\n    setIsSettingOpen(false);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const goMain = () => {\r\n    window.location.href = \"/main\";\r\n  };\r\n\r\n  const goFaq = () => {\r\n    navigate(\"/faq\");\r\n  };\r\n\r\n  const DoLogout = usePostLogout();\r\n  const Logout = async () => {\r\n    try {\r\n      const result = await DoLogout.mutateAsync();\r\n      console.log(result);\r\n      if (result?.status === 200) {\r\n        console.log(\"logout\");\r\n        localStorage.removeItem(\"accessToken\");\r\n        window.location.href = \"/main\";\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PageContainer>\r\n      <div style={{ width: \"100%\" }}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            marginBottom: \"40px\",\r\n          }}\r\n        >\r\n          <MenuTitle></MenuTitle>\r\n        </div>\r\n        <MenuItem onClick={goMain}>MAIN</MenuItem>\r\n        <MenuItem onClick={Logout}>LOG OUT</MenuItem>\r\n        <MenuItem onClick={openModal}>MY PAGE</MenuItem>\r\n        <MenuItem onClick={goFaq}>FAQ</MenuItem>\r\n        <ModalContainer isOpen={isModalOpen}>\r\n          <ProfilePage />\r\n        </ModalContainer>\r\n        <Backdrop isOpen={isModalOpen} onClick={closeModal} />\r\n      </div>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default MenuPage;\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\faq\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\crystalBall\\index.tsx",["447"],["448","449","450","451","452"],"import { useState, Suspense, useEffect } from \"react\";\r\nimport {\r\n  Sphere,\r\n  OrbitControls,\r\n  Box,\r\n  useTexture,\r\n  Environment,\r\n} from \"@react-three/drei\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\nimport { a as aw, useSpring as useSpringWeb } from \"@react-spring/web\";\r\nimport { a as a3, useSpring as useSpringThree } from \"@react-spring/three\";\r\nimport * as THREE from \"three\";\r\nimport styled from \"styled-components\";\r\nimport AlertModal from \"@/components/alertModal\";\r\nimport { useLuckyColor } from \"@/apis/luck/Queries/useLuckyColor\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { ColorInfoState } from \"@/states/luckState\";\r\n\r\ninterface MagicMarbleMaterialProps\r\n  extends THREE.MeshStandardMaterialParameters {\r\n  step: number;\r\n}\r\n\r\nconst Backdrop = styled.div<{ isOpen: boolean }>`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5); /* Semi-transparent black background */\r\n  display: ${(props) => (props.isOpen ? \"block\" : \"none\")};\r\n  z-index: 5;\r\n`;\r\n\r\n// Create a modal container\r\nconst ModalContainer = styled.div<{ isOpen: boolean }>`\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  padding: 20px;\r\n  display: ${(props) => (props.isOpen ? \"block\" : \"none\")};\r\n  z-index: 8;\r\n`;\r\n\r\ninterface ColorOptions {\r\n  [key: string]: number[]; // 인덱스 시그니처 추가\r\n}\r\n\r\nconst options: ColorOptions = {\r\n  RED: [0, 100, 50], // 빨간색\r\n  ORANGE: [30, 100, 50], // 주황색\r\n  YELLOW: [60, 100, 50], // 노란색\r\n  GREEN: [120, 100, 50], // 초록색\r\n  BLUE: [240, 100, 50], // 파란색\r\n  NAVY: [200, 70, 60], // 남색\r\n  PURPLE: [270, 100, 50], // 보라색\r\n  PINK: [330, 100, 50], // 분홍색\r\n  BROWN: [30, 70, 25], // 갈색\r\n  WHITE: [0, 0, 100], // 흰색\r\n  GRAY: [0, 0, 40], // 회색\r\n  OLIVE: [60, 100, 50], // 올리브색\r\n  SKYBLUE: [200, 70, 60], // 하늘색\r\n  MINT: [150, 100, 50], // 민트색\r\n};\r\n\r\nconst CrystalBallPage = () => {\r\n  const [step, setStep] = useState(0);\r\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 열림 여부 상태\r\n  const [isColor, setIsColor] = useRecoilState(ColorInfoState);\r\n  const colorInfo = useLuckyColor();\r\n\r\n  useEffect(() => {\r\n    if (isColor.colorName === \"\") {\r\n      setIsColor(colorInfo);\r\n    }\r\n  }, [colorInfo, setIsColor, isColor]);\r\n\r\n  // 모달 열기 함수\r\n  const openModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  // 모달 닫기 함수\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const { opacity } = useSpringWeb({\r\n    opacity: 1, // Start from 0 and transition to 1\r\n    from: { opacity: 0 }, // Initial opacity value\r\n    config: {\r\n      duration: 1000, // 0.5 seconds\r\n    },\r\n  });\r\n\r\n  return (\r\n    // position: fixed;\r\n    // top: 50%;\r\n    // left: 50%;\r\n    // transform: translate(-50%, -50%);\r\n    // padding: 20px;\r\n    // display: \"block\";\r\n    // z-index: 2;\r\n    <>\r\n      {/* 모달 렌더링 */}\r\n      <Backdrop isOpen={isModalOpen} onClick={closeModal} />\r\n      <aw.div\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          position: \"fixed\",\r\n          top: \"0%\",\r\n          left: \"0%\",\r\n          display: \"block\",\r\n          background: \"radial-gradient(#4d0d3f, transparent)\",\r\n          zIndex: 5,\r\n          opacity,\r\n        }}\r\n      >\r\n        <Canvas camera={{ position: [0, 0, 2] }}>\r\n          <Suspense fallback={null}>\r\n            <OrbitControls\r\n              autoRotate\r\n              enableRotate={false}\r\n              enablePan={false}\r\n              enableZoom={false}\r\n            />\r\n            <Marble step={step} setStep={setStep} openModal={openModal} />\r\n            <Environment preset=\"warehouse\" />\r\n          </Suspense>\r\n        </Canvas>\r\n\r\n        <ModalContainer isOpen={isModalOpen}>\r\n          <AlertModal\r\n            width=\"550px\"\r\n            topText={`Lucky ${isColor.colorName}`}\r\n            middleText={`${isColor.description.replace(/\\\\n/g, \"<br/>\")}`}\r\n            bottomText=\"메인으로 돌아가기\"\r\n            imageUrl={`${isColor.imagePath}`}\r\n            topTextColor={`${isColor.color}`}\r\n            middleTextColor=\"#5E3A66\"\r\n            bottomTextColor=\"#EAE2ED\"\r\n            upperSectionBackground=\"#EAE2ED\"\r\n            lowerSectionBackground=\"#5E3A66\"\r\n            topTextFontSize=\"28px\"\r\n            middleTextFontSize=\"14px\"\r\n            bottomTextFontSize=\"20px\"\r\n            topTextPaddingTopBottom=\"2px\"\r\n            middleTextPaddingTopBottom=\"20px\"\r\n            middleTextPaddingLeftRight=\"20px\"\r\n            topTextFontWeight=\"bold\"\r\n            middleTextFontWeight=\"medium\"\r\n            bottomTextFontWeight=\"medium\"\r\n            routerLink=\"/main\"\r\n          />\r\n        </ModalContainer>\r\n      </aw.div>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface MarbleProps {\r\n  step: number;\r\n  setStep: (step: number) => void;\r\n  openModal: () => void; // openModal 함수가 어떤 인자도 받지 않음\r\n}\r\n\r\nconst Marble: React.FC<MarbleProps> = ({ step, setStep, openModal }) => {\r\n  const [hover, setHover] = useState(false);\r\n  const [tap, setTap] = useState(false);\r\n  const { scale } = useSpringThree({\r\n    scale: tap && hover ? 0.95 : 1,\r\n    opacity: step === 0 ? 0 : 1, // Initially set opacity to 0, and gradually increase it when step is not 0\r\n    config: {\r\n      friction: 15,\r\n      tension: 300,\r\n    },\r\n  });\r\n\r\n  // 구체 클릭 이벤트 핸들러\r\n  const handleSphereClick = () => {\r\n    setStep(step + 1); // 스텝 증가\r\n    setTimeout(() => {\r\n      openModal(); // 모달 열기\r\n    }, 1000); // 1000 밀리초(1초) 후에 함수 실행\r\n  };\r\n\r\n  return (\r\n    <group>\r\n      <a3.group\r\n        scale={scale}\r\n        onPointerEnter={() => setHover(true)}\r\n        onPointerOut={() => setHover(false)}\r\n        onClick={handleSphereClick}\r\n      >\r\n        <Sphere args={[1, 64, 32]}>\r\n          <MagicMarbleMaterial step={step} roughness={0.1} />\r\n        </Sphere>\r\n      </a3.group>\r\n      {/* This big invisible box is just a pointer target so we can reliably track if the mouse button is up or down */}\r\n      <Box\r\n        args={[100, 100, 100]}\r\n        onPointerDown={() => setTap(true)}\r\n        onPointerUp={() => setTap(false)}\r\n      >\r\n        {/* eslint-disable-next-line react/no-unknown-property */}\r\n        <meshBasicMaterial side={THREE.BackSide} visible={false} />\r\n      </Box>\r\n    </group>\r\n  );\r\n};\r\n\r\nconst MagicMarbleMaterial: React.FC<MagicMarbleMaterialProps> = ({\r\n  step,\r\n  ...props\r\n}) => {\r\n  const [isColor, setIsColor] = useRecoilState(ColorInfoState);\r\n\r\n  // Load the noise textures\r\n  const heightMap = useTexture(\"noise.jpg\");\r\n  const displacementMap = useTexture(\"noise3D.jpg\");\r\n  heightMap.minFilter = displacementMap.minFilter = THREE.NearestFilter;\r\n  displacementMap.wrapS = displacementMap.wrapT = THREE.RepeatWrapping;\r\n\r\n  // Create persistent local uniforms object\r\n  const [uniforms] = useState(() => ({\r\n    time: { value: 0 },\r\n    colorA: { value: new THREE.Color(0, 0, 0) },\r\n    colorB: { value: new THREE.Color(0, 0, 0) },\r\n    heightMap: { value: heightMap },\r\n    displacementMap: { value: displacementMap },\r\n    iterations: { value: 48 },\r\n    depth: { value: 0.6 },\r\n    smoothing: { value: 0.2 },\r\n    displacement: { value: 0.1 },\r\n  }));\r\n\r\n  // This spring value allows us to \"fast forward\" the displacement in the marble\r\n  const { timeOffset } = useSpringThree({\r\n    hsl: options[isColor.colorName], // 스텝에 따라 옵션에서 색상 가져오기\r\n    timeOffset: step * 0.2,\r\n    config: { tension: 50 },\r\n    onChange: ({ value: { hsl } }) => {\r\n      const [h, s, l] = hsl;\r\n      uniforms.colorB.value.setHSL(h / 360, s / 100, l / 100);\r\n    },\r\n  });\r\n\r\n  // Update time uniform on each frame\r\n  useFrame(({ clock }) => {\r\n    uniforms.time.value = timeOffset.get() + clock.elapsedTime * 0.05;\r\n  });\r\n\r\n  // Add our custom bits to the MeshStandardMaterial\r\n  const onBeforeCompile = (shader: THREE.Shader) => {\r\n    // Wire up local uniform references\r\n    shader.uniforms = { ...shader.uniforms, ...uniforms };\r\n\r\n    // Add to top of vertex shader\r\n    shader.vertexShader =\r\n      /* glsl */ `\r\n      varying vec3 v_pos;\r\n      varying vec3 v_dir;\r\n    ` + shader.vertexShader;\r\n\r\n    // Assign values to varyings inside of main()\r\n    shader.vertexShader = shader.vertexShader.replace(\r\n      /void main\\(\\) {/,\r\n      (match) =>\r\n        match +\r\n        /* glsl */ `\r\n        v_dir = position - cameraPosition; // Points from camera to vertex\r\n        v_pos = position;\r\n        `\r\n    );\r\n\r\n    // Add to top of fragment shader\r\n    shader.fragmentShader =\r\n      /* glsl */ `\r\n      #define FLIP vec2(1., -1.)\r\n      \r\n      uniform vec3 colorA;\r\n      uniform vec3 colorB;\r\n      uniform sampler2D heightMap;\r\n      uniform sampler2D displacementMap;\r\n      uniform int iterations;\r\n      uniform float depth;\r\n      uniform float smoothing;\r\n      uniform float displacement;\r\n      uniform float time;\r\n      \r\n      varying vec3 v_pos;\r\n      varying vec3 v_dir;\r\n    ` + shader.fragmentShader;\r\n\r\n    // Add above fragment shader main() so we can access common.glsl.js\r\n    shader.fragmentShader = shader.fragmentShader.replace(\r\n      /void main\\(\\) {/,\r\n      (match) =>\r\n        /* glsl */ `\r\n       \t/**\r\n         * @param p - Point to displace\r\n         * @param strength - How much the map can displace the point\r\n         * @returns Point with scrolling displacement applied\r\n         */\r\n        vec3 displacePoint(vec3 p, float strength) {\r\n        \tvec2 uv = equirectUv(normalize(p));\r\n          vec2 scroll = vec2(time, 0.);\r\n          vec3 displacementA = texture(displacementMap, uv + scroll).rgb; // Upright\r\n\t\t\t\t\tvec3 displacementB = texture(displacementMap, uv * FLIP - scroll).rgb; // Upside down\r\n          \r\n          // Center the range to [-0.5, 0.5], note the range of their sum is [-1, 1]\r\n          displacementA -= 0.5;\r\n          displacementB -= 0.5;\r\n          \r\n          return p + strength * (displacementA + displacementB);\r\n        }\r\n        \r\n\t\t\t\t/**\r\n          * @param rayOrigin - Point on sphere\r\n          * @param rayDir - Normalized ray direction\r\n          * @returns Diffuse RGB color\r\n          */\r\n        vec3 marchMarble(vec3 rayOrigin, vec3 rayDir) {\r\n          float perIteration = 1. / float(iterations);\r\n          vec3 deltaRay = rayDir * perIteration * depth;\r\n\r\n          // Start at point of intersection and accumulate volume\r\n          vec3 p = rayOrigin;\r\n          float totalVolume = 0.;\r\n\r\n          for (int i=0; i<iterations; ++i) {\r\n            // Read heightmap from spherical direction of displaced ray position\r\n            vec3 displaced = displacePoint(p, displacement);\r\n            vec2 uv = equirectUv(normalize(displaced));\r\n            float heightMapVal = texture(heightMap, uv).r;\r\n\r\n            // Take a slice of the heightmap\r\n            float height = length(p); // 1 at surface, 0 at core, assuming radius = 1\r\n            float cutoff = 1. - float(i) * perIteration;\r\n            float slice = smoothstep(cutoff, cutoff + smoothing, heightMapVal);\r\n\r\n            // Accumulate the volume and advance the ray forward one step\r\n            totalVolume += slice * perIteration;\r\n            p += deltaRay;\r\n          }\r\n          return mix(colorA, colorB, totalVolume);\r\n        }\r\n      ` + match\r\n    );\r\n\r\n    shader.fragmentShader = shader.fragmentShader.replace(\r\n      /vec4 diffuseColor.*;/,\r\n      /* glsl */ `\r\n      vec3 rayDir = normalize(v_dir);\r\n      vec3 rayOrigin = v_pos;\r\n      \r\n      vec3 rgb = marchMarble(rayOrigin, rayDir);\r\n      vec4 diffuseColor = vec4(rgb, 1.);      \r\n      `\r\n    );\r\n  };\r\n\r\n  return (\r\n    <meshStandardMaterial\r\n      {...props}\r\n      // eslint-disable-next-line react/no-unknown-property\r\n      onBeforeCompile={onBeforeCompile}\r\n      // eslint-disable-next-line react/no-unknown-property\r\n      onUpdate={(m) => (m.needsUpdate = true)}\r\n      // eslint-disable-next-line react/no-unknown-property\r\n      customProgramCacheKey={() => onBeforeCompile.toString()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CrystalBallPage;\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\main\\index.jsx",["453","454","455"],[],"import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport * as THREE from \"three\";\r\nimport Flickity from \"flickity\";\r\nimport \"flickity/css/flickity.css\"; // Import Flickity CSS\r\nimport \"./style.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { useUserInfo } from \"@/apis/menu/Queries/useUserInfo\";\r\n// import { userInfoState, userLoginState } from \"@/states/userState\";\r\nimport money from \"../../assets/img/mainLogo/money.png\";\r\nimport dictionary from \"../../assets/img/mainLogo/dictionary.jpg\";\r\nimport masooriStory from \"../../assets/img/mainLogo/masooriStory.jpg\";\r\nimport spendtarot from \"../../assets/img/mainLogo/spendtarot.jpg\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport VerifyNumberModal from \"@/components/verifyNumberModal\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { nowDateInfoState } from \"@/states/spendState\";\r\nimport { useGetConsumeRecent } from \"@/apis/spend/Queries/useGetConsumeRecent\";\r\nimport { spendIdState, specialIdState } from \"@/states/dictionaryState\";\r\nimport { modalOpenState } from \"@/states/userState\";\r\nimport { usePostConsume } from \"@/apis/main/Mutations/usePostConsume\";\r\n\r\n//verifymodal\r\n\r\nconst Backdrop = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.8); /* Semi-transparent black background */\r\n  display: ${(props) => (props.isOpen ? \"block\" : \"none\")};\r\n  z-index: 1;\r\n`;\r\n\r\nconst ModalContainer = styled.div`\r\n  position: fixed;\r\n  top: 23%;\r\n  left: 40%;\r\n  transform: translate(-50%, -50%);\r\n  padding: 20px;\r\n  display: ${(props) => (props.isOpen ? \"block\" : \"none\")};\r\n  z-index: 3;\r\n`;\r\n\r\nconst MainPage = () => {\r\n  const navigate = useNavigate();\r\n  const canvasRef = useRef(null); // Ref to store the canvas element\r\n  // 로그인 사용자 userInfo:isAuthenticated 체크\r\n  const [spendId, setSpendId] = useRecoilState(spendIdState);\r\n\r\n  const [nowDateInfo, setNowDateInfo] = useRecoilState(nowDateInfoState);\r\n  const [isLogin, setIsLogin] = useState(\"\");\r\n  const [isAuth, setIsAuth] = useState(false);\r\n  const [specialId, setSpecialId] = useRecoilState(specialIdState);\r\n\r\n  useEffect(() => {\r\n    let body,\r\n      mainContainer,\r\n      scene,\r\n      renderer,\r\n      camera,\r\n      windowWidth,\r\n      windowHeight,\r\n      windowHalfWidth,\r\n      windowHalfHeight,\r\n      mouseX = 0,\r\n      mouseY = 0,\r\n      graphics,\r\n      currentGraphic = 0,\r\n      graphicCanvas,\r\n      gctx,\r\n      graphicPixels;\r\n\r\n    const cameraLookAt = new THREE.Vector3(0, 0, 0),\r\n      cameraTarget = new THREE.Vector3(0, 0, 800),\r\n      colors = [\"#F9DFAD\", \"#FFC56E\", \"#F96893\", \"#FFFFFF\", \"#FFC56E\"],\r\n      canvasWidth = 260,\r\n      canvasHeight = 260,\r\n      particles = [],\r\n      graphicOffsetX = canvasWidth / 2,\r\n      graphicOffsetY = canvasHeight / 4;\r\n\r\n    const initStage = () => {\r\n      body = document.querySelector(\".body\");\r\n      mainContainer = document.querySelector(\"#main\");\r\n      setWindowSize();\r\n      window.addEventListener(\"resize\", onWindowResize, false);\r\n      window.addEventListener(\"mousemove\", onMouseMove, false);\r\n    };\r\n\r\n    const initScene = () => {\r\n      scene = new THREE.Scene();\r\n      renderer = new THREE.WebGLRenderer({\r\n        alpha: true,\r\n        antialias: true,\r\n        canvas: canvasRef.current, // Use the canvas element from the ref\r\n      });\r\n      renderer.setPixelRatio(window.devicePixelRatio);\r\n      renderer.setSize(windowWidth, windowHeight);\r\n      mainContainer.appendChild(renderer.domElement);\r\n      scene.background = new THREE.Color(0x4d3548);\r\n    };\r\n\r\n    const initCamera = () => {\r\n      const fieldOfView = 75;\r\n      const aspectRatio = windowWidth / windowHeight;\r\n      const nearPlane = 1;\r\n      const farPlane = 3000;\r\n      camera = new THREE.PerspectiveCamera(\r\n        fieldOfView,\r\n        aspectRatio,\r\n        nearPlane,\r\n        farPlane\r\n      );\r\n      camera.position.z = 800;\r\n    };\r\n\r\n    const initCanvas = () => {\r\n      graphicCanvas = document.createElement(\"canvas\");\r\n      graphicCanvas.width = canvasWidth;\r\n      graphicCanvas.height = canvasHeight;\r\n      gctx = graphicCanvas.getContext(\"2d\");\r\n      graphics = document.querySelectorAll(\".intro-cell > img\");\r\n    };\r\n\r\n    function Particle(graphicPixels) {\r\n      this.graphicPixels = graphicPixels; // Store graphicPixels array\r\n      this.vx = Math.random() * 0.05;\r\n      this.vy = Math.random() * 0.05;\r\n    }\r\n\r\n    Particle.prototype.init = function (i) {\r\n      const particle = new THREE.Object3D();\r\n      const geometryCore = new THREE.SphereGeometry(2, 4, 4);\r\n      const materialCore = new THREE.MeshBasicMaterial({\r\n        color: colors[i % colors.length],\r\n      });\r\n\r\n      const box = new THREE.Mesh(geometryCore, materialCore);\r\n\r\n      const pos = getGraphicPos(graphicPixels[i]);\r\n      particle.targetPosition = new THREE.Vector3(pos.x, pos.y, pos.z);\r\n\r\n      particle.position.set(\r\n        windowWidth * 0.5,\r\n        windowHeight * 0.5,\r\n        -10 * Math.random() + 20\r\n      );\r\n      randomPos(particle.position);\r\n\r\n      // Modifying vertices for BufferGeometry\r\n      const positions = box.geometry.getAttribute(\"position\").array;\r\n      for (let i = 0; i < positions.length; i += 3) {\r\n        positions[i] += -2 + Math.random() * 4; // x\r\n        positions[i + 1] += -2 + Math.random() * 4; // y\r\n        positions[i + 2] += -2 + Math.random() * 4; // z\r\n      }\r\n      box.geometry.getAttribute(\"position\").needsUpdate = true;\r\n\r\n      particle.add(box);\r\n      this.particle = particle;\r\n    };\r\n\r\n    Particle.prototype.updateRotation = function () {\r\n      this.particle.rotation.x += this.vx;\r\n      this.particle.rotation.y += this.vy;\r\n    };\r\n\r\n    Particle.prototype.updatePosition = function () {\r\n      this.particle.position.lerp(this.particle.targetPosition, 0.1);\r\n    };\r\n\r\n    const updateParticles = () => {\r\n      for (let i = 0, l = particles.length; i < l; i++) {\r\n        particles[i].updateRotation();\r\n        particles[i].updatePosition();\r\n      }\r\n    };\r\n\r\n    const getGraphicPos = (pixel) => {\r\n      const posX = (pixel.x - graphicOffsetX - Math.random() * 4 - 2) * 3;\r\n      const posY = (pixel.y - graphicOffsetY - Math.random() * 4 - 2) * 3;\r\n      const posZ = -20 * Math.random() + 40;\r\n      return { x: posX, y: posY, z: posZ };\r\n    };\r\n\r\n    const setParticles = () => {\r\n      const maxParticles = 3000; // Change this to the desired number of particles\r\n\r\n      for (let i = 0; i < graphicPixels.length && i < maxParticles; i++) {\r\n        if (particles[i]) {\r\n          const pos = getGraphicPos(graphicPixels[i]);\r\n          particles[i].particle.targetPosition.x = pos.x;\r\n          particles[i].particle.targetPosition.y = pos.y;\r\n          particles[i].particle.targetPosition.z = pos.z;\r\n        } else {\r\n          const p = new Particle();\r\n          p.init(i);\r\n          scene.add(p.particle);\r\n          particles[i] = p;\r\n        }\r\n      }\r\n\r\n      for (let i = graphicPixels.length; i < particles.length; i++) {\r\n        randomPos(particles[i].particle.targetPosition, true);\r\n      }\r\n\r\n      console.log(\"Total Particles: \" + particles.length);\r\n    };\r\n\r\n    const randomPos = (vector, outFrame = false) => {\r\n      const radius = outFrame ? windowWidth * 2 : windowWidth * -2;\r\n      const centerX = 0;\r\n      const centerY = 0;\r\n      const r = windowWidth + radius * Math.random();\r\n      const angle = Math.random() * Math.PI * 2;\r\n      vector.x = centerX + r * Math.cos(angle);\r\n      vector.y = centerY + r * Math.sin(angle);\r\n      vector.z = Math.random() * windowWidth;\r\n    };\r\n\r\n    const updateGraphic = () => {\r\n      const img = graphics[currentGraphic];\r\n      gctx.drawImage(img, 0, 0, canvasWidth, canvasHeight);\r\n\r\n      const gData = gctx.getImageData(0, 0, canvasWidth, canvasHeight).data;\r\n      graphicPixels = [];\r\n\r\n      for (let i = gData.length; i >= 0; i -= 4) {\r\n        if (gData[i] === 0) {\r\n          const x = (i / 4) % canvasWidth;\r\n          const y = canvasHeight - Math.floor(Math.floor(i / canvasWidth) / 4);\r\n\r\n          if (x && x % 2 === 0 && y && y % 2 === 0) {\r\n            graphicPixels.push({\r\n              x: x,\r\n              y: y,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < particles.length; i++) {\r\n        randomPos(particles[i].particle.targetPosition);\r\n      }\r\n\r\n      setTimeout(() => {\r\n        setParticles();\r\n      }, 500);\r\n    };\r\n\r\n    const initBgObjects = () => {\r\n      for (let i = 0; i < 40; i++) {\r\n        createBgObject(i);\r\n      }\r\n    };\r\n\r\n    const createBgObject = (i) => {\r\n      const geometry = new THREE.SphereGeometry(10, 6, 6);\r\n      const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\r\n      const sphere = new THREE.Mesh(geometry, material);\r\n      scene.add(sphere);\r\n      const x = Math.random() * windowWidth * 2 - windowWidth;\r\n      const y = Math.random() * windowHeight * 2 - windowHeight;\r\n      const z = Math.random() * -2000 - 200;\r\n      sphere.position.set(x, y, z);\r\n    };\r\n\r\n    const initSlider = () => {\r\n      const elem = document.querySelector(\".intro-carousel\");\r\n\r\n      const flkty = new Flickity(elem, {\r\n        cellAlign: \"center\",\r\n        contain: true,\r\n        pageDots: false,\r\n        wrapAround: true,\r\n        resize: true,\r\n        arrowShape: {\r\n          x0: 10,\r\n          x1: 60,\r\n          y1: 50,\r\n          x2: 70,\r\n          y2: 40,\r\n          x3: 30,\r\n        },\r\n      });\r\n\r\n      const listener = () => {\r\n        currentGraphic = flkty.selectedIndex;\r\n        updateGraphic();\r\n        console.log(flkty.selectedIndex);\r\n      };\r\n\r\n      flkty.on(\"select\", listener);\r\n    };\r\n\r\n    const onMouseMove = (event) => {\r\n      mouseX = event.clientX - windowHalfWidth;\r\n      mouseY = event.clientY - windowHalfHeight;\r\n      cameraTarget.x = Number(-mouseX) / 2;\r\n      cameraTarget.y = mouseY / 2;\r\n    };\r\n\r\n    const onWindowResize = () => {\r\n      setWindowSize();\r\n      camera.aspect = windowWidth / windowHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(windowWidth, windowHeight);\r\n    };\r\n\r\n    const setWindowSize = () => {\r\n      windowWidth = window.innerWidth;\r\n      windowHeight = window.innerHeight;\r\n      windowHalfWidth = windowWidth / 3;\r\n      windowHalfHeight = windowHeight / 2;\r\n    };\r\n\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      updateParticles();\r\n      camera.position.lerp(cameraTarget, 0.2);\r\n      camera.lookAt(cameraLookAt);\r\n      render();\r\n    };\r\n\r\n    const render = () => {\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    initStage();\r\n    initScene();\r\n    initCanvas();\r\n    initCamera();\r\n    initSlider();\r\n    initBgObjects();\r\n    updateGraphic();\r\n    animate();\r\n\r\n    const areAllImagesLoaded = () => {\r\n      const images = document.querySelectorAll(\".intro-cell > img\");\r\n      for (const img of images) {\r\n        if (!img.complete) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    const initAll = () => {\r\n      initStage();\r\n      initScene();\r\n      initCanvas();\r\n      initCamera();\r\n      initSlider();\r\n      initBgObjects();\r\n      updateGraphic();\r\n      animate();\r\n\r\n      window.addEventListener(\"resize\", onWindowResize, false);\r\n      window.addEventListener(\"mousemove\", onMouseMove, false);\r\n    };\r\n\r\n    if (areAllImagesLoaded()) {\r\n      initAll();\r\n    } else {\r\n      const images = document.querySelectorAll(\".intro-cell > img\");\r\n      let loadedImagesCount = 0;\r\n\r\n      images.forEach((img) => {\r\n        img.addEventListener(\"load\", () => {\r\n          loadedImagesCount++;\r\n          if (loadedImagesCount === images.length) {\r\n            initAll();\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      // 이전에 생성된 파티클을 제거합니다.\r\n      for (let i = 0; i < particles.length; i++) {\r\n        scene.remove(particles[i].particle);\r\n      }\r\n\r\n      window.removeEventListener(\"resize\", onWindowResize);\r\n      window.removeEventListener(\"mousemove\", onMouseMove);\r\n    };\r\n  }, []);\r\n\r\n  //modal\r\n  const [isVerifyModalOpen, setIsVerifyModalOpen] = useState(false); // 모달 열림 여부 상태\r\n  const [isModalOpen, setIsModalOpen] = useRecoilState(modalOpenState);\r\n\r\n  //navigation\r\n  const navigateAbout = () => {\r\n    navigate(\"/landing\");\r\n  };\r\n\r\n  const navigateLuck = () => {\r\n    if (isLogin === \"true\") {\r\n      navigate(\"/userluck\");\r\n    } else {\r\n      toast.info(\"비로그인 시 카드 저장 불가\");\r\n      setTimeout(() => {\r\n        navigate(\"/luck\");\r\n      }, 1000); // 1초 뒤에 \"/luck\"으로 이동\r\n    }\r\n  };\r\n\r\n  const navigateDictionary = () => {\r\n    if (isLogin === \"true\") {\r\n      if (specialId !== null) {\r\n        navigate(\"/dictionary\");\r\n      } else {\r\n        navigate(\"/userdictionary\");\r\n      }\r\n    } else {\r\n      setIsModalOpen(!isModalOpen);\r\n    }\r\n  };\r\n\r\n  // 모달 닫기 함수\r\n  const closeModal = () => {\r\n    setIsVerifyModalOpen(false);\r\n  };\r\n\r\n  const closeVerifyModal = () => {\r\n    setIsVerifyModalOpen(false);\r\n    setIsAuth(true);\r\n  };\r\n\r\n  const usePostConsumeMutation = usePostConsume();\r\n\r\n  const postConsumeHandler = useCallback(async () => {\r\n    try {\r\n      await usePostConsumeMutation.mutateAsync();\r\n      toast.info(\"⛓ 연동 성공 ⛓\");\r\n    } catch (error) {\r\n      console.error(\"연동 실패:\", error);\r\n    }\r\n  }, [usePostConsumeMutation]);\r\n\r\n  const consumeRecent = useGetConsumeRecent(nowDateInfo);\r\n  const userInfo = useUserInfo(isLogin);\r\n\r\n  if (userInfo) {\r\n    setSpecialId(userInfo.challengeCardId);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setNowDateInfo(\"\");\r\n    if (consumeRecent === \"인증\") {\r\n      console.log(\"인증\");\r\n      postConsumeHandler();\r\n    }\r\n\r\n    if (consumeRecent && consumeRecent.card) {\r\n      // Access consumeRecent.card safely\r\n      setSpendId(consumeRecent.card.id);\r\n      console.log(spendId);\r\n      window.location.href = \"/spend\";\r\n    }\r\n  }, [\r\n    consumeRecent,\r\n    setNowDateInfo,\r\n    setSpendId,\r\n    spendId,\r\n    isVerifyModalOpen,\r\n    postConsumeHandler,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // Check if there is an accessToken in localStorage\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    if (accessToken) {\r\n      setIsLogin(\"true\"); // accessToken이 있으면 isLogin을 true로 설정\r\n    }\r\n  }, [userInfo]);\r\n\r\n  const checkAuth = () => {\r\n    if (isLogin === \"true\") {\r\n      if (userInfo.isAuthenticated === true || isAuth === true) {\r\n        const currentDate = new Date();\r\n        currentDate.setHours(0, 0, 0, 0); // Set hours, minutes, seconds, and milliseconds to zero\r\n        const initialEndDate = currentDate.toISOString().slice(0, -2);\r\n        setNowDateInfo(initialEndDate);\r\n        console.log(\"true라 recent를 호출할거임\");\r\n      } else {\r\n        toast.warning(\"현재는 소비내역 블랙박스입니다. \");\r\n        console.log(\"false라 모달이 떴음\");\r\n        setIsVerifyModalOpen(!isVerifyModalOpen);\r\n      }\r\n    } else {\r\n      setIsModalOpen(!isModalOpen);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <main role=\"main\" id=\"main\">\r\n        <div className=\"feature\">\r\n          <canvas ref={canvasRef} />\r\n          <div className=\"intro-carousel\">\r\n            <div className=\"intro-cell\">\r\n              <img src={masooriStory} className=\"intro-graphic\" />\r\n              <div className=\"intro-text\">\r\n                <h1>마수리 이야기</h1>\r\n                <p>\r\n                  당신의 소비내역으로 만드는 마수리만의 특별한 타로카드.\r\n                  <br />\r\n                  마수리와 함께 새로운 시작, 새로운 습관을 만들어보세요.\r\n                </p>\r\n                <a onClick={navigateAbout}>ENTER</a>\r\n              </div>\r\n            </div>\r\n            <div className=\"intro-cell\">\r\n              <img src={money} className=\"intro-graphic\" />\r\n              <div className=\"intro-text\">\r\n                <h1>오늘의 금전운</h1>\r\n                <p>\r\n                  마수리와 함께 오늘의 금전운과 행운의 색깔을 확인하세요!\r\n                  <br /> 당신의 하루를 더 행복하고 특별하게 만들어 줄 조언들이\r\n                  기다리고 있습니다.\r\n                </p>\r\n                <a onClick={navigateLuck}>ENTER</a>\r\n              </div>\r\n            </div>\r\n            <div className=\"intro-cell\">\r\n              <img src={spendtarot} className=\"intro-graphic\" />\r\n              <div className=\"intro-text\">\r\n                <h1>소비패턴 타로</h1>\r\n                <p>\r\n                  당신의 주간 소비 패턴으로 탄생하는 단 하나의 타로카드\r\n                  <br /> 당신만을 위한 특별한 메시지를 받아보세요.\r\n                </p>\r\n                <a onClick={checkAuth}>ENTER</a>\r\n              </div>\r\n            </div>\r\n            <div className=\"intro-cell\">\r\n              <img src={dictionary} className=\"intro-graphic\" />\r\n              <div className=\"intro-text\">\r\n                <h1>도감 및 카드추천</h1>\r\n                <p>\r\n                  당신만의 타로카드를 한 눈에 확인하세요. <br />\r\n                  더불어, 마수리의 맞춤형 카드 추천 서비스를 통해 똑똑한 소비를\r\n                  경험해보세요!\r\n                </p>\r\n                <a onClick={navigateDictionary}>ENTER</a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n      <ModalContainer isOpen={isVerifyModalOpen}>\r\n        <VerifyNumberModal closeModal={closeVerifyModal} />\r\n      </ModalContainer>\r\n      <Backdrop isOpen={isVerifyModalOpen} onClick={closeModal} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n",[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\states\\luckState.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\Queries\\useFortune.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\Queries\\useLuckyColor.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\tarotCard\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\textBubble\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\hashtag\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\alertModal\\index.tsx",["456"],[],"import { useNavigate } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport interface StyledAlertModalProps {\r\n  width: string;\r\n  imageUrl: string;\r\n  topText: string;\r\n  middleText: string;\r\n  bottomText: string;\r\n  topTextColor: string;\r\n  middleTextColor: string;\r\n  bottomTextColor: string;\r\n  upperSectionBackground: string;\r\n  lowerSectionBackground: string;\r\n  topTextFontSize: string;\r\n  middleTextFontSize: string;\r\n  bottomTextFontSize: string;\r\n  topTextPaddingTopBottom: string;\r\n  middleTextPaddingTopBottom: string;\r\n  middleTextPaddingLeftRight: string;\r\n  topTextFontWeight: string;\r\n  middleTextFontWeight: string;\r\n  bottomTextFontWeight: string;\r\n  zIndex?: string;\r\n  routerLink: string;\r\n}\r\n\r\nconst StyledAlertModal = styled.div<StyledAlertModalProps>`\r\n  width: ${(props) => props.width};\r\n  border-radius: 30px;\r\n  background: transparent; // 배경색을 투명으로 설정\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 20px;\r\n  z-index: ${(props) => props.zIndex};\r\n`;\r\n\r\nconst UpperSection = styled.div<{ upperSectionBackground: string }>`\r\n  background: ${(props) => props.upperSectionBackground}; // 첫 번째 구역 배경색\r\n  border-radius: 30px 30px 0px 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n`;\r\n\r\nconst LowerSection = styled.div<{ lowerSectionBackground: string }>`\r\n  background: ${(props) => props.lowerSectionBackground}; // 두 번째 구역 배경색\r\n  border-radius: 0px 0px 30px 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding-left: 50px;\r\n  padding-right: 50px;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  width: 50%;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 30px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n`;\r\n\r\nconst TopText = styled.div<{\r\n  topTextColor: string;\r\n  topTextFontSize: string;\r\n  topTextPaddingTopBottom: string;\r\n  topTextFontWeight: string;\r\n}>`\r\n  color: ${(props) => props.topTextColor};\r\n  font-size: ${(props) => props.topTextFontSize};\r\n  padding-top: ${(props) => props.topTextPaddingTopBottom};\r\n  padding-bottom: ${(props) => props.topTextPaddingTopBottom};\r\n  font-weight: ${(props) => props.topTextFontWeight};\r\n`;\r\n\r\nconst MiddleText = styled.div<{\r\n  middleTextColor: string;\r\n  middleTextFontSize: string;\r\n  middleTextPaddingTopBottom: string;\r\n  middleTextPaddingLeftRight: string;\r\n  middleTextFontWeight: string;\r\n}>`\r\n  color: ${(props) => props.middleTextColor};\r\n  font-size: ${(props) => props.middleTextFontSize};\r\n  font-weight: ${(props) => props.middleTextFontWeight};\r\n  padding-top: ${(props) => props.middleTextPaddingTopBottom};\r\n  padding-bottom: ${(props) => props.middleTextPaddingTopBottom};\r\n  padding-left: ${(props) => props.middleTextPaddingLeftRight};\r\n  padding-right: ${(props) => props.middleTextPaddingLeftRight};\r\n`;\r\n\r\nconst BottomText = styled.div<{\r\n  bottomTextColor: string;\r\n  bottomTextFontSize: string;\r\n  bottomTextFontWeight: string;\r\n}>`\r\n  color: ${(props) => props.bottomTextColor};\r\n  font-size: ${(props) => props.bottomTextFontSize};\r\n  padding-top: 25px;\r\n  padding-bottom: 25px;\r\n  font-weight: ${(props) => props.bottomTextFontWeight};\r\n  padding-right: 7px;\r\n`;\r\n\r\nconst AlertModal = ({\r\n  width,\r\n  topText,\r\n  middleText,\r\n  bottomText,\r\n  imageUrl,\r\n  topTextColor,\r\n  middleTextColor,\r\n  bottomTextColor,\r\n  upperSectionBackground,\r\n  lowerSectionBackground,\r\n  topTextFontSize,\r\n  middleTextFontSize,\r\n  bottomTextFontSize,\r\n  topTextPaddingTopBottom,\r\n  middleTextPaddingTopBottom,\r\n  middleTextPaddingLeftRight,\r\n  topTextFontWeight,\r\n  middleTextFontWeight,\r\n  bottomTextFontWeight,\r\n  zIndex,\r\n  routerLink,\r\n}: StyledAlertModalProps) => {\r\n  // const navigate = useNavigate();\r\n\r\n  const handleLowerSectionClick = () => {\r\n    window.location.href = routerLink;\r\n  };\r\n\r\n  const content = { __html: middleText };\r\n\r\n  return (\r\n    <StyledAlertModal\r\n      width={width}\r\n      topText={topText}\r\n      middleText={middleText}\r\n      bottomText={bottomText}\r\n      imageUrl={imageUrl}\r\n      topTextColor={topTextColor}\r\n      middleTextColor={middleTextColor}\r\n      bottomTextColor={bottomTextColor}\r\n      upperSectionBackground={upperSectionBackground}\r\n      lowerSectionBackground={lowerSectionBackground}\r\n      topTextFontSize={topTextFontSize}\r\n      middleTextFontSize={middleTextFontSize}\r\n      bottomTextFontSize={bottomTextFontSize}\r\n      topTextPaddingTopBottom={topTextPaddingTopBottom}\r\n      middleTextPaddingTopBottom={middleTextPaddingTopBottom}\r\n      middleTextPaddingLeftRight={middleTextPaddingLeftRight}\r\n      topTextFontWeight={topTextFontWeight}\r\n      middleTextFontWeight={middleTextFontWeight}\r\n      bottomTextFontWeight={bottomTextFontWeight}\r\n      zIndex={zIndex}\r\n      routerLink={routerLink}\r\n    >\r\n      <UpperSection upperSectionBackground={upperSectionBackground}>\r\n        <ImageContainer>\r\n          <Image src={imageUrl} alt=\"Image\" />\r\n        </ImageContainer>\r\n        <TopText\r\n          topTextColor={topTextColor}\r\n          topTextFontSize={topTextFontSize}\r\n          topTextPaddingTopBottom={topTextPaddingTopBottom}\r\n          topTextFontWeight={topTextFontWeight}\r\n        >\r\n          {topText}\r\n        </TopText>\r\n        <MiddleText\r\n          middleTextColor={middleTextColor}\r\n          middleTextFontSize={middleTextFontSize}\r\n          middleTextPaddingTopBottom={middleTextPaddingTopBottom}\r\n          middleTextPaddingLeftRight={middleTextPaddingLeftRight}\r\n          middleTextFontWeight={middleTextFontWeight}\r\n        >\r\n          <div dangerouslySetInnerHTML={content} />\r\n        </MiddleText>\r\n      </UpperSection>\r\n      <LowerSection\r\n        lowerSectionBackground={lowerSectionBackground}\r\n        onClick={handleLowerSectionClick}\r\n      >\r\n        <BottomText\r\n          bottomTextColor={bottomTextColor}\r\n          bottomTextFontSize={bottomTextFontSize}\r\n          bottomTextFontWeight={bottomTextFontWeight}\r\n        >\r\n          {bottomText}\r\n        </BottomText>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"15\"\r\n          height=\"18\"\r\n          viewBox=\"0 0 17 28\"\r\n          fill=\"none\"\r\n        >\r\n          <path\r\n            d=\"M0 2.968L11.0528 14L0 25.032L2.9736 28L17 14L2.9736 0L0 2.968Z\"\r\n            fill=\"#EAE2ED\"\r\n          />\r\n        </svg>\r\n      </LowerSection>\r\n    </StyledAlertModal>\r\n  );\r\n};\r\n\r\nexport default AlertModal;\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\ghostModal\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\registbtn\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\shareModal\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\modal\\login\\index.tsx",["457"],[],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport Kakao from \"@/assets/img/Kakao.png\";\r\nimport Google from \"@/assets/img/Google.png\";\r\nimport Naver from \"@/assets/img/Naver.png\";\r\nimport BackCards from \"@/assets/img/Login.png\";\r\nimport SignInModalFront from \"@/assets/img/signCard/signInModalFront.png\";\r\nimport SignUpModalFront from \"@/assets/img/signCard/signUpModalFront.png\";\r\nimport styled from \"styled-components\";\r\nimport { usePostLogin } from \"@/apis/user/Mutations/usePostLogin\";\r\nimport {\r\n  CheckDuplicateEmailProps,\r\n  CheckSignUpCodeProps,\r\n  LoginProps,\r\n} from \"@/types/userType\";\r\nimport { usePostCheckDuplicateEmail } from \"@/apis/user/Mutations/usePostCheckDuplicateEmail\";\r\nimport { usePostSendSignUpCode } from \"@/apis/user/Mutations/usePostSendSignUpCode\";\r\nimport { usePostCheckSignUpCode } from \"@/apis/user/Mutations/usePostCheckSignUpCode\";\r\nimport { usePostSignUp } from \"@/apis/user/Mutations/usePostSignUp\";\r\ninterface ImgProps {\r\n  loaded: boolean;\r\n}\r\nimport { modalOpenState } from \"@/states/userState\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  left: 39.5%;\r\n  top: 3%;\r\n`;\r\n\r\nconst LoginFrontImg = styled.div<ImgProps>`\r\n  position: absolute;\r\n  left: 40%;\r\n  height: 65vh;\r\n  width: 21vw;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-image: url(${SignInModalFront});\r\n  background-position: center;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  z-index: 99;\r\n  opacity: ${({ loaded }) => (loaded ? \"1\" : \"0\")};\r\n  transition: opacity 0.5s ease-in-out;\r\n`;\r\n\r\nconst SignUpFrontImg = styled.div<ImgProps>`\r\n  position: absolute;\r\n  left: 40%;\r\n  height: 65vh;\r\n  width: 21vw;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-image: url(${SignUpModalFront});\r\n  background-position: center;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  opacity: ${({ loaded }) => (loaded ? \"1\" : \"0\")};\r\n  transition: opacity 0.5s ease-in-out;\r\n`;\r\n\r\nconst Id = styled.div`\r\n  position: relative;\r\n  z-index: 3;\r\n  top: 15%;\r\n`;\r\n\r\nconst PW = styled.div`\r\n  position: relative;\r\n  top: 17%;\r\n  z-index: 3;\r\n`;\r\n\r\nconst PWCheck = styled.div`\r\n  position: relative;\r\n  top: 7%;\r\n  z-index: 9;\r\n`;\r\nconst FormLabel = styled.p`\r\n  font-size: small;\r\n  display: flex;\r\n  font-weight: bold;\r\n  margin-bottom: 2px;\r\n  color: #5e3a66;\r\n`;\r\n\r\nconst CommentLabel = styled.p<{\r\n  viewComment: boolean;\r\n}>`\r\n  font-size: small;\r\n  display: flex;\r\n  font-weight: bold;\r\n  margin-bottom: 2px;\r\n  color: red;\r\n  opacity: ${(props) => (props.viewComment ? \"1\" : \"0\")};\r\n`;\r\n\r\nconst CodeLabel = styled.p<{\r\n  codeCommentState?: boolean;\r\n}>`\r\n  font-size: small;\r\n  display: flex;\r\n  font-weight: bold;\r\n  margin-bottom: 2px;\r\n  color: ${(props) => (props.codeCommentState ? \"red\" : \"green\")};\r\n  opacity: ${(props) => (props.codeCommentState ? \"1\" : \"0\")};\r\n`;\r\n//     props.codeCommentState ? (props.codeState ? \"1\" : \"1\") : \"0\"};\r\n\r\nconst Input = styled.input`\r\n  width: 17vw;\r\n  border-radius: 5px;\r\n  border-width: 1px;\r\n  border-color: #5e3a66;\r\n  height: 30px;\r\n  padding-left: 5px;\r\n\r\n  &:focus {\r\n    border-color: #5e3a66; /* 클릭했을 때 테두리 색상 변경 */\r\n  }\r\n`;\r\n\r\nconst SignUp = styled.div`\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n  display: flex;\r\n  justify-content: end;\r\n  font-weight: bold;\r\n  font-size: small;\r\n  color: #5e3a66;\r\n`;\r\n\r\nconst LoginButton = styled.button`\r\n  width: 17vw;\r\n  border-radius: 5px;\r\n  border-color: #5e3a66;\r\n  border-width: 2px;\r\n  margin-bottom: 20px;\r\n  height: 30px;\r\n  background-color: #eae2ed;\r\n  color: #5e3a66;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n\r\n  &:hover {\r\n    background-color: #5e3a66; /* 호버 시 배경색 변경 */\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst SocialLogin = styled.img`\r\n  width: 17vw;\r\n  margin-top: 5px;\r\n`;\r\n\r\nconst Email = styled.div`\r\n  position: relative;\r\n  z-index: 1;\r\n  top: 15%;\r\n  width: \"250px\";\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst EmailCheck = styled.div`\r\n  width: \"250px\";\r\n  position: relative;\r\n  top: 17%;\r\n  z-index: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst DisableNextButton = styled.button`\r\n  width: 16.275vw;\r\n  border-radius: 5px;\r\n  border-color: #5e3a66;\r\n  border-width: 1px;\r\n  margin-top: 25px;\r\n  height: 30px;\r\n  background-color: #eae2ed;\r\n  color: #5e3a66;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n`;\r\n\r\nconst AbleNextButton = styled(DisableNextButton)`\r\n  background-color: #5e3a66;\r\n  color: #eae2ed;\r\n`;\r\n\r\nconst FinishButton = styled.button`\r\n  width: 16.275vw;\r\n  border-radius: 5px;\r\n  border-color: #5e3a66;\r\n  border-width: 2px;\r\n  margin-top: 25px;\r\n  height: 30px;\r\n  background-color: #5e3a66;\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n`;\r\n\r\nconst EmailInput = styled.input`\r\n  width: 11.5vw;\r\n  border-radius: 5px;\r\n  border-width: 1px;\r\n  border-color: #5e3a66;\r\n  height: 30px;\r\n  padding-left: 5px;\r\n`;\r\n\r\nconst DuplicateCheckButton = styled.button`\r\n  width: 4.5vw;\r\n  border-radius: 5px;\r\n  border-width: 1px;\r\n  border-color: #5e3a66;\r\n  font-size: 12px;\r\n  background-color: #5e3a66;\r\n  height: 30px;\r\n  color: white;\r\n  /* font-weight: bold; */\r\n`;\r\n\r\nconst DisableSendCodeButton = styled.button`\r\n  width: 4.5vw;\r\n  border-radius: 5px;\r\n  border-width: 1px;\r\n  border-color: #5e3a66;\r\n  font-size: 12px;\r\n  height: 30px;\r\n  font-weight: bold;\r\n  color: #5e3a66;\r\n  background-color: #eae2ed;\r\n`;\r\n\r\nconst AbleSendCodeButton = styled(DisableSendCodeButton)`\r\n  background-color: #5e3a66;\r\n  color: #eae2ed;\r\n`;\r\n\r\nconst Login: React.FC = () => {\r\n  const [modalState, setModalState] = useState<string>(\"로그인\");\r\n  const [imageLoaded, setImageLoaded] = useState<boolean>(false); // 이미지 로드 상태\r\n  const [isTextEntered, setIsTextEntered] = useState(false);\r\n\r\n  //로그인 시작 ----------------------------------------------\r\n\r\n  const Login = usePostLogin();\r\n\r\n  //유저 데이터\r\n  const [userData, setUserData] = useState<LoginProps>({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const result = await Login.mutateAsync(userData);\r\n      console.log(result);\r\n\r\n      if (result?.status === 200) {\r\n        toast.info(\"👻 환영합니다 👻\");\r\n        setTimeout(() => {\r\n          window.location.href = \"/main\";\r\n        }, 1200);\r\n      } else if (result === undefined) {\r\n        toast.warning(\"❗ 입력을 다시 확인해주세요 ❗\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"로그인에 실패했습니다.\", error);\r\n    }\r\n  };\r\n\r\n  const activeEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\") {\r\n      handleLogin();\r\n    }\r\n  };\r\n\r\n  //로그인 종료 ----------------------------------------------\r\n\r\n  //이메일 중복 체크 시작 ----------------------------------------------\r\n\r\n  const [isDuplicated, setIsDuplicated] = useState<boolean>(false);\r\n  const [duplicateEmailData, setDuplicateEmailData] =\r\n    useState<CheckDuplicateEmailProps>({\r\n      email: \"\",\r\n    });\r\n\r\n  const CheckDuplicateEmail = usePostCheckDuplicateEmail();\r\n\r\n  const handleCheckDuplicateEmail = async () => {\r\n    try {\r\n      const result: boolean =\r\n        await CheckDuplicateEmail.mutateAsync(duplicateEmailData);\r\n\r\n      setIsDuplicated(result);\r\n\r\n      if (isDuplicated === true) {\r\n        console.log(\"중복된 이메일입니다.\");\r\n      } else {\r\n        console.log(\"중복되지 않은 이메일입니다.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"이메일 중복 확인에 실패했습니다.\", error);\r\n    }\r\n  };\r\n\r\n  //이메일 중복 체크 종료 ----------------------------------------------\r\n\r\n  //이메일 중복 결과 멘트 시작 ----------------------------------------------\r\n\r\n  const [emailComment, setEmailComment] = useState<string>(\"\"); // 이메일 중복확인 결과 멘트\r\n  const [viewComment, setViewComment] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (isDuplicated === true) {\r\n      setEmailComment(\"* 이미 가입한 회원입니다.\");\r\n    } else {\r\n      setEmailComment(\"* 가입 가능한 계정입니다.\");\r\n    }\r\n  }, [isDuplicated]);\r\n\r\n  //이메일 중복 결과 멘트 종료 ----------------------------------------------\r\n\r\n  //이메일 코드 전송 시작 ----------------------------------------------\r\n\r\n  const SendSignUpCode = usePostSendSignUpCode();\r\n\r\n  const handleSendSignUpCode = async () => {\r\n    try {\r\n      console.log(duplicateEmailData);\r\n      await SendSignUpCode.mutateAsync(duplicateEmailData);\r\n      toast.info(\"✉ 코드가 전송되었습니다 ✉\");\r\n    } catch (error) {\r\n      console.error(\"회원가입 코드 전송에 실패했습니다.\", error);\r\n    }\r\n  };\r\n\r\n  //이메일 코드 전송 종료 ----------------------------------------------\r\n\r\n  //이메일 코드 유효성 검사 시작 ----------------------------------------------\r\n\r\n  const [signUpCodeData, setSignUpCodeData] = useState<string>(\"\");\r\n  const CheckSignUpCode = usePostCheckSignUpCode();\r\n  const [doP, setDoP] = useState<boolean>(false);\r\n  const [codeState, setCodeState] = useState<boolean>(false);\r\n  const [codeCommentState, setCodeCommentState] = useState<boolean>(false);\r\n  const [signupInfo, setSignUpInfo] = useState<CheckSignUpCodeProps>({\r\n    email: \"\",\r\n    code: \"\",\r\n  });\r\n\r\n  const handleCheckSignUpCode = useCallback(\r\n    async ({ email, code }: CheckSignUpCodeProps) => {\r\n      try {\r\n        const signupInfo = {\r\n          email: email,\r\n          code: code,\r\n        };\r\n        const result = await CheckSignUpCode.mutateAsync(signupInfo);\r\n        console.log(signupInfo);\r\n        console.log(result);\r\n        setCodeCommentState(true);\r\n        if (result === 200) {\r\n          setCodeState(true);\r\n        } else {\r\n          setCodeState(false);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"회원가입 코드 확인에 실패했습니다.\", error);\r\n      }\r\n    },\r\n    [CheckSignUpCode] // CheckSignUpCode를 의존성 배열에 포함\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (signUpCodeData.length === 8 && doP === false) {\r\n      handleCheckSignUpCode({\r\n        email: duplicateEmailData.email,\r\n        code: signUpCodeData,\r\n      });\r\n      setDoP(true);\r\n    }\r\n  }, [\r\n    signUpCodeData.length,\r\n    duplicateEmailData.email,\r\n    handleCheckSignUpCode,\r\n    signUpCodeData,\r\n    CheckSignUpCode,\r\n    signupInfo,\r\n    doP,\r\n  ]);\r\n\r\n  //이메일 코드 유효성 검사 종료 ----------------------------------------------\r\n\r\n  //이메일 코드 유효성 멘트 시작 ----------------------------------------------\r\n\r\n  const [codeComment, setCodeComment] = useState<string>(\"\"); // 이메일 중복확인 결과 멘트\r\n\r\n  useEffect(() => {\r\n    if (codeState === true && codeCommentState === true) {\r\n      setCodeComment(\"* 유효한 코드입니다.\");\r\n    } else {\r\n      setCodeComment(\"* 유효하지 않은 코드입니다.\");\r\n    }\r\n  }, [codeState, codeCommentState]);\r\n\r\n  //이메일 코드 유효성 멘트 종료 ----------------------------------------------\r\n\r\n  //회원가입 비밀번호 일치 여부 확인 종료 ----------------------------------------------\r\n\r\n  const [signUpPassword, setSignUpPassword] = useState<string>(\"\");\r\n  const [checkSignUpPassword, setCheckSignUpPassword] = useState<string>(\"\");\r\n  const [isSame, setIsSame] = useState<boolean>(false);\r\n  const [passwordCheckState, setPasswordCheckState] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    if (signUpPassword === checkSignUpPassword && signUpPassword.length > 0) {\r\n      setIsSame(true);\r\n      setPasswordCheckState(\"비밀번호가 일치합니다.\");\r\n      console.log(isSame);\r\n    } else if (\r\n      signUpPassword.length === checkSignUpPassword.length &&\r\n      signUpPassword !== checkSignUpPassword\r\n    ) {\r\n      setIsSame(true);\r\n      setPasswordCheckState(\"비밀번호가 일치하지 않습니다.\");\r\n    }\r\n  }, [signUpPassword, checkSignUpPassword, isSame]);\r\n\r\n  //회원가입 비밀번호 일치 여부 확인 종료 ----------------------------------------------\r\n\r\n  //회원가입 ----------------------------------------------\r\n\r\n  const [isModalOpen, setIsModalOpen] = useRecoilState(modalOpenState);\r\n  const DoSignUp = usePostSignUp();\r\n\r\n  const registInfo = {\r\n    email: duplicateEmailData.email,\r\n    password: signUpPassword,\r\n  };\r\n\r\n  const handleRegist = async () => {\r\n    console.log(registInfo);\r\n    try {\r\n      const result = await DoSignUp.mutateAsync(registInfo);\r\n      if (result === 200) {\r\n        // window.location.reload;\r\n        toast.info(\"🎃회원가입이 완료됬습니다🎃\");\r\n        setIsModalOpen(false);\r\n        setTimeout(() => {\r\n          window.location.href = \"/main\";\r\n        }, 1500);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"회원가입에 실패했습니다.\", error);\r\n    }\r\n  };\r\n\r\n  //회원가입 종료 ----------------------------------------------\r\n\r\n  useEffect(() => {\r\n    if (imageLoaded) {\r\n      setIsModalOpen(true);\r\n    }\r\n  }, [imageLoaded, setIsModalOpen]);\r\n\r\n  // 모달이 열릴 때 이미지 로드를 시작합니다.\r\n  useEffect(() => {\r\n    if (isModalOpen) {\r\n      const img1 = new Image();\r\n      const img2 = new Image();\r\n      const img3 = new Image();\r\n      img1.src = BackCards;\r\n      img2.src = SignInModalFront;\r\n      img3.src = SignUpModalFront;\r\n\r\n      const checkImagesLoaded = () => {\r\n        if (img1.complete && img2.complete && img3.complete) {\r\n          setImageLoaded(true);\r\n        }\r\n      };\r\n\r\n      // 이미지의 로드 상태를 확인하는 이벤트 리스너 추가\r\n      img1.onload = checkImagesLoaded;\r\n      img2.onload = checkImagesLoaded;\r\n      img3.onload = checkImagesLoaded;\r\n\r\n      // 이미지 로드 상태를 확인하고 업데이트하는 함수를 호출합니다.\r\n      checkImagesLoaded();\r\n    }\r\n  }, [isModalOpen]);\r\n\r\n  const OAUTH2_REDIERECT_URI = `${process.env.REACT_APP_BASE_URL}/oauth/redirect`; /* 이거에대한페이지 생성 */\r\n  const onSocialButtonClick = (socialName: string) => {\r\n    const AUTH_URL = `${process.env.REACT_APP_SERVER_URL}/login/oauth2/authorization/${socialName}?redirect_uri=${OAUTH2_REDIERECT_URI}`;\r\n    window.location.href = AUTH_URL;\r\n  };\r\n\r\n  if (modalState === \"로그인\") {\r\n    return (\r\n      <Container>\r\n        <LoginFrontImg loaded={imageLoaded}>\r\n          <Id>\r\n            <FormLabel>계정이름</FormLabel>\r\n            <Input\r\n              value={userData.email}\r\n              onChange={(e) => {\r\n                setUserData({ ...userData, email: e.target.value });\r\n                // 텍스트가 입력되거나 제거될 때 상태 변수 업데이트\r\n                setIsTextEntered(Boolean(e.target.value));\r\n              }}\r\n              style={{\r\n                color: isTextEntered ? \"#5e3a66\" : \"initial\", // 상황에 따라 텍스트 색상을 조건적으로 변경\r\n              }}\r\n            />\r\n          </Id>\r\n          <PW>\r\n            <FormLabel>비밀번호</FormLabel>\r\n            <Input\r\n              value={userData.password}\r\n              type=\"password\"\r\n              onChange={(e) =>\r\n                setUserData({ ...userData, password: e.target.value })\r\n              }\r\n              style={{\r\n                color: isTextEntered ? \"#5e3a66\" : \"initial\", // 상황에 따라 텍스트 색상을 조건적으로 변경\r\n              }}\r\n              onKeyPress={activeEnter}\r\n            />\r\n            <SignUp>\r\n              <button\r\n                onClick={() => {\r\n                  setModalState(\"회원가입1\");\r\n                }}\r\n              >\r\n                회원가입\r\n              </button>\r\n            </SignUp>\r\n            <LoginButton onClick={handleLogin}>Login</LoginButton>\r\n            <SocialLogin\r\n              src={Kakao}\r\n              onClick={() => {\r\n                onSocialButtonClick(\"kakao\");\r\n              }}\r\n            />\r\n            <SocialLogin\r\n              src={Google}\r\n              onClick={() => {\r\n                onSocialButtonClick(\"google\");\r\n              }}\r\n            />\r\n            <SocialLogin\r\n              src={Naver}\r\n              onClick={() => {\r\n                onSocialButtonClick(\"naver\");\r\n              }}\r\n            />\r\n          </PW>\r\n        </LoginFrontImg>\r\n      </Container>\r\n    );\r\n  } else if (modalState === \"회원가입1\") {\r\n    return (\r\n      <Container>\r\n        <SignUpFrontImg loaded={imageLoaded}>\r\n          <Email>\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n              <FormLabel>이메일</FormLabel>\r\n              <CommentLabel viewComment={viewComment}>\r\n                {emailComment}\r\n              </CommentLabel>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignContent: \"center\",\r\n                justifyContent: \"space-between\",\r\n                width: \"250px\",\r\n              }}\r\n            >\r\n              <EmailInput\r\n                value={duplicateEmailData.email}\r\n                onChange={(e) => {\r\n                  setDuplicateEmailData({\r\n                    ...duplicateEmailData,\r\n                    email: e.target.value,\r\n                  });\r\n                  setViewComment(false);\r\n                  setIsDuplicated(false);\r\n                }}\r\n                style={{\r\n                  color: isTextEntered ? \"#5e3a66\" : \"initial\", // 상황에 따라 텍스트 색상을 조건적으로 변경\r\n                }}\r\n              />\r\n              <DuplicateCheckButton\r\n                onClick={() => {\r\n                  handleCheckDuplicateEmail();\r\n                  setViewComment(true);\r\n                }}\r\n              >\r\n                중복확인\r\n              </DuplicateCheckButton>\r\n            </div>\r\n          </Email>\r\n          <EmailCheck>\r\n            <div\r\n              style={{\r\n                width: \"250px\",\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n              }}\r\n            >\r\n              <FormLabel>이메일 코드 확인</FormLabel>\r\n              <CodeLabel codeCommentState={codeCommentState}>\r\n                {codeComment}\r\n              </CodeLabel>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignContent: \"center\",\r\n                justifyContent: \"space-between\",\r\n                width: \"250px\",\r\n              }}\r\n            >\r\n              <EmailInput //Email 인증 코드\r\n                value={signUpCodeData}\r\n                onChange={(e) => {\r\n                  setSignUpCodeData(e.target.value);\r\n                  setCodeState(false);\r\n                  setDoP(false);\r\n                  setCodeCommentState(false);\r\n                }}\r\n                style={{\r\n                  color: isTextEntered ? \"#5e3a66\" : \"initial\", // 상황에 따라 텍스트 색상을 조건적으로 변경\r\n                }}\r\n              />\r\n              {!isDuplicated ? (\r\n                <DisableSendCodeButton>코드전송</DisableSendCodeButton>\r\n              ) : (\r\n                <AbleSendCodeButton\r\n                  onClick={() => {\r\n                    handleSendSignUpCode();\r\n                  }}\r\n                >\r\n                  코드전송\r\n                </AbleSendCodeButton>\r\n              )}\r\n            </div>\r\n            <SignUp>\r\n              {!codeState ? (\r\n                <DisableNextButton>NEXT</DisableNextButton>\r\n              ) : (\r\n                <AbleNextButton\r\n                  onClick={() => {\r\n                    setModalState(\"회원가입2\");\r\n                  }}\r\n                >\r\n                  NEXT\r\n                </AbleNextButton>\r\n              )}\r\n            </SignUp>\r\n          </EmailCheck>\r\n        </SignUpFrontImg>\r\n      </Container>\r\n    );\r\n  } else {\r\n    return (\r\n      <Container>\r\n        <SignUpFrontImg loaded={imageLoaded}>\r\n          <Id>\r\n            <FormLabel>이메일</FormLabel>\r\n            <Input\r\n              type=\"text\"\r\n              value={duplicateEmailData.email}\r\n              disabled\r\n              style={{\r\n                opacity: 0.6,\r\n                color: isTextEntered ? \"#5e3a66\" : \"initial\",\r\n              }}\r\n            />\r\n          </Id>\r\n          <PW>\r\n            <FormLabel>비밀번호</FormLabel>\r\n            <Input\r\n              type=\"password\"\r\n              value={signUpPassword}\r\n              onChange={(e) => {\r\n                setSignUpPassword(e.target.value);\r\n                setIsSame(false);\r\n              }}\r\n              style={{\r\n                color: isTextEntered ? \"#5e3a66\" : \"initial\", // 상황에 따라 텍스트 색상을 조건적으로 변경\r\n              }}\r\n            />\r\n            <PWCheck>\r\n              <div\r\n                style={{\r\n                  width: \"250px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n              >\r\n                <FormLabel>비밀번호 확인</FormLabel>\r\n                <CodeLabel codeCommentState={isSame}>\r\n                  {passwordCheckState}\r\n                </CodeLabel>\r\n              </div>\r\n              <Input\r\n                type=\"password\"\r\n                value={checkSignUpPassword}\r\n                onChange={(e) => {\r\n                  setCheckSignUpPassword(e.target.value);\r\n                  setIsSame(false);\r\n                }}\r\n                style={{\r\n                  color: isTextEntered ? \"#5e3a66\" : \"initial\", // 상황에 따라 텍스트 색상을 조건적으로 변경\r\n                }}\r\n              />\r\n            </PWCheck>\r\n            <FinishButton\r\n              onClick={() => {\r\n                handleRegist();\r\n              }}\r\n            >\r\n              FINISH\r\n            </FinishButton>\r\n          </PW>\r\n        </SignUpFrontImg>\r\n      </Container>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\dictBtn\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\cardFlip\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\book\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\challengeBubble\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\Pokemon\\index.jsx",["458","459"],[],"import { useState } from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport { styled } from \"styled-components\";\r\n\r\nconst StyledTarotCardTop = styled.div`\r\n  width: ${(props) => props.cardWidth};\r\n  height: auto;\r\n  position: absolute;\r\n  z-index: 1;\r\n`;\r\n\r\nconst TopImage = styled.img`\r\n  width: ${(props) => props.cardWidth};\r\n  height: auto;\r\n`;\r\n\r\nconst BottomText = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  bottom: ${(props) => props.bottom};\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 1;\r\n  font-size: ${(props) => props.fontsize};\r\n  color: #5e3a66;\r\n  font-family: \"Museum\";\r\n`;\r\n\r\nconst PokemonCard = ({\r\n  imageUrl,\r\n  cardWidth,\r\n  cardSrc,\r\n  text,\r\n  fontsize,\r\n  bottom = \"5px\",\r\n}) => {\r\n  const [clickedCard, setClickedCard] = useState(null);\r\n  const [disableHover, setDisableHover] = useState(false); // State to disable hover effect\r\n  const [hoverStyle, setHoverStyle] = useState({}); // State to manage hover style\r\n\r\n  const handleCardHover = (e) => {\r\n    if (disableHover) {\r\n      return;\r\n    } // If hover is disabled, return\r\n\r\n    const style = document.createElement(\"style\");\r\n    document.head.appendChild(style);\r\n\r\n    const card = e.currentTarget;\r\n    const pos = [e.nativeEvent.offsetX, e.nativeEvent.offsetY];\r\n    const l = pos[0];\r\n    const t = pos[1];\r\n    const h = card.offsetHeight;\r\n    const w = card.offsetWidth;\r\n    const px = Math.abs(Math.floor((100 / w) * l) - 100);\r\n    const py = Math.abs(Math.floor((100 / h) * t) - 100);\r\n    const pa = 50 - px + (50 - py);\r\n    const lp = 50 + (px - 50) / 1.5;\r\n    const tp = 50 + (py - 50) / 1.5;\r\n    const pxSpark = 50 + (px - 50) / 7;\r\n    const pySpark = 50 + (py - 50) / 7;\r\n    const pOpc = 20 + Math.abs(pa) * 1.5;\r\n    const ty = ((tp - 50) / 2) * -1;\r\n    const tx = ((lp - 50) / 1.5) * 0.5;\r\n\r\n    const gradPos = `background-position: ${lp}% ${tp}%;`;\r\n    const sprkPos = `background-position: ${pxSpark}% ${pySpark}%;`;\r\n    const opc = `opacity: ${pOpc / 100};`;\r\n    const transform = { transform: `rotateX(${ty}deg) rotateY(${tx}deg)` };\r\n\r\n    style.innerHTML = `\r\n    .${styles.card}:hover::before { ${gradPos} }\r\n    .${styles.card}:hover::after { ${sprkPos} ${opc} }\r\n  `;\r\n\r\n    const newHoverStyle = {\r\n      ...transform,\r\n    };\r\n\r\n    setHoverStyle(newHoverStyle); // Update hover style\r\n  };\r\n\r\n  const handleCardLeave = () => {\r\n    setHoverStyle({}); // Clear hover style\r\n  };\r\n\r\n  return (\r\n    <div className={styles.app}>\r\n      <section className={styles.cards}>\r\n        <div\r\n          className={`${styles.card} ${styles.charizard} ${\r\n            clickedCard === 0 ? styles.clicked : \"\"\r\n          }`}\r\n          onMouseMove={handleCardHover}\r\n          onMouseLeave={handleCardLeave}\r\n          style={{\r\n            backgroundImage: `url(${imageUrl})`, // Set background image to the passed imageUrl\r\n            ...(disableHover ? {} : hoverStyle), // Apply hover style only if not disabled\r\n            // ... Other styles ...\r\n          }}\r\n        >\r\n          <StyledTarotCardTop cardWidth={cardWidth}>\r\n            <TopImage cardWidth={cardWidth} src={cardSrc}></TopImage>\r\n            <BottomText text={text} fontsize={fontsize} bottom={bottom}>\r\n              {text}\r\n            </BottomText>\r\n          </StyledTarotCardTop>\r\n        </div>\r\n        {/* Other card divs with similar event handlers */}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonCard;\r\n",[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\donutGraph\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\toggle\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\luckAPI.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Mutations\\usePostGhost.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostCheckDuplicateEmail.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostSendSignUpCode.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostLogin.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostCheckSignUpCode.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\instance.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\spendAPI.ts",["460","461"],[],"import { instance } from \"@/apis/instance\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { nowDateInfoState } from \"@/states/spendState\";\r\n\r\nconst postGhost = async () => {\r\n  try {\r\n    const response = await instance.post(`/user/ghost`);\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - postGhost\");\r\n  }\r\n};\r\n\r\nconst postSSESendData = async () => {\r\n  try {\r\n    const response = await instance.post(`/sse/send-data`);\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - postSSESendData\");\r\n  }\r\n};\r\n\r\nconst getSSESubscribe = async () => {\r\n  try {\r\n    const response = await instance.get(`/sse/subscribe`);\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - getSSESubscribe\");\r\n  }\r\n};\r\n\r\nconst getConsumeId = async (id: number) => {\r\n  try {\r\n    const response = await instance.get(`/card/consume/${id}`);\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - getConsumeId\");\r\n  }\r\n};\r\n\r\nconst getConsumeRecent = async (nowDate: string) => {\r\n  try {\r\n    const response = await instance.get(`/card/consume/recent?now=${nowDate}`);\r\n    return response.data;\r\n  } catch (error: any) {\r\n    // 400 에러 처리 (카드생성중)\r\n    if (\r\n      error.response &&\r\n      error.response.status === 400 &&\r\n      error.response.data.code === \"C009\"\r\n    ) {\r\n      toast.info(\"🃏 아직 카드 생성중... 🃏\");\r\n    } else if (\r\n      error.response &&\r\n      error.response.status === 400 &&\r\n      error.response.data.code === \"C008\"\r\n    ) {\r\n      return \"인증\";\r\n    } else {\r\n      // 다른 에러 처리\r\n      console.error(\"API 연동 오류 - getConsumeRecent:\", error);\r\n      console.log(error.response);\r\n      // 에러 처리 로직 추가\r\n    }\r\n    // 에러를 다시 throw하지 않고 기본값 또는 빈 데이터를 반환\r\n    return null;\r\n  }\r\n};\r\n\r\nexport {\r\n  postGhost,\r\n  getConsumeId,\r\n  getConsumeRecent,\r\n  postSSESendData,\r\n  getSSESubscribe,\r\n};\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\userAPI.ts",["462"],[],"import { instance } from \"@/apis/instance\";\r\nimport {\r\n  CheckPhoneSMSProps,\r\n  SendPhoneSMSProps,\r\n  LoginProps,\r\n  SendSignUpCodeProps,\r\n  RenewPasswordProps,\r\n  CheckSignUpCodeProps,\r\n  CheckDuplicateEmailProps,\r\n  SignUpProps,\r\n  SettingMonthlyGoalProps,\r\n} from \"@/types/userType\";\r\nimport { error } from \"console\";\r\n\r\n//\r\nconst postSendPhoneSMS = async (SendPhoneSMSData: SendPhoneSMSProps) => {\r\n  try {\r\n    const response = await instance.post(`/user/sms`, SendPhoneSMSData);\r\n    return response.data;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postSendPhoneSMS\"));\r\n  }\r\n};\r\n\r\nconst postCheckPhoneSMS = async (CheckPhoneSMSData: CheckPhoneSMSProps) => {\r\n  try {\r\n    const response = await instance.post(`/user/sms/check`, CheckPhoneSMSData);\r\n    return response.data;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postCheckPhoneSMS\"));\r\n  }\r\n};\r\n\r\nconst postSignUp = async (SignUpData: SignUpProps) => {\r\n  try {\r\n    const response = await instance.post(`/user/signup`, SignUpData);\r\n    console.log(response);\r\n    return response.status;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postSignUp\"));\r\n  }\r\n};\r\n\r\nconst postLogout = async () => {\r\n  try {\r\n    const response = await instance.post(`/user/logout`);\r\n    return response;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postLogout\"));\r\n  }\r\n};\r\n\r\nconst postLogin = async (LoginData: LoginProps) => {\r\n  try {\r\n    const response = await instance.post(`/user/login`, LoginData);\r\n    console.log(response);\r\n    localStorage.setItem(\"accessToken\", response.data.accessToken!);\r\n\r\n    return response;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postLogin\"));\r\n  }\r\n};\r\n\r\nconst postSpendCardConnect = async () => {\r\n  try {\r\n    const response = await instance.post(`/user/generation`);\r\n    return response.data;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postSpendCardConnect\"));\r\n  }\r\n};\r\n\r\nconst postSendSignUpCode = async (SendSignUpCodeData: SendSignUpCodeProps) => {\r\n  try {\r\n    const response = await instance.post(\r\n      `/user/email/signup`,\r\n      SendSignUpCodeData\r\n    );\r\n    console.log(response);\r\n    // return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - postSendSignUpCode\");\r\n  }\r\n};\r\n\r\nconst postRenewPassword = async (RenewPasswordData: RenewPasswordProps) => {\r\n  try {\r\n    const response = await instance.post(\r\n      `/user/email/password`,\r\n      RenewPasswordData\r\n    );\r\n    return response.data;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postRenewPassword\"));\r\n  }\r\n};\r\n\r\nconst postCheckSignUpCode = async (\r\n  CheckSignUpCodeData: CheckSignUpCodeProps\r\n) => {\r\n  try {\r\n    const response = await instance.post(\r\n      `/user/email/check`,\r\n      CheckSignUpCodeData\r\n    );\r\n    console.log(response);\r\n    return response.status;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postCheckSignUpCode\"));\r\n  }\r\n};\r\n\r\nconst postCheckDuplicateEmail = async (\r\n  CheckDuplicateEmailData: CheckDuplicateEmailProps\r\n) => {\r\n  try {\r\n    const response = await instance.post(\r\n      `/user/email-duplication/check`,\r\n      CheckDuplicateEmailData\r\n    );\r\n    return response.data;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postCheckDuplicateEmail\"));\r\n  }\r\n};\r\n\r\nconst postGeneration = async () => {\r\n  try {\r\n    const response = await instance.post(`/user/generation`);\r\n    console.log(response);\r\n    return response.data;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postGeneration\"));\r\n  }\r\n};\r\n\r\nconst postAlram = async () => {\r\n  try {\r\n    const response = await instance.post(`/user/alram`);\r\n    console.log(response);\r\n    return response.data;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postAlram\"));\r\n  }\r\n};\r\n\r\nconst postSetGoalAmount = async (amount: SettingMonthlyGoalProps) => {\r\n  try {\r\n    const response = await instance.post(`/user/monthly-spending`, amount);\r\n    console.log(response);\r\n    return response;\r\n  } catch {\r\n    console.log(new Error(\"api 연동 오류 - postSetGoalAmount\"));\r\n  }\r\n};\r\n\r\nexport {\r\n  postSetGoalAmount,\r\n  postAlram,\r\n  postGeneration,\r\n  postCheckDuplicateEmail,\r\n  postSendPhoneSMS,\r\n  postCheckPhoneSMS,\r\n  postSignUp,\r\n  postLogout,\r\n  postLogin,\r\n  postSpendCardConnect,\r\n  postSendSignUpCode,\r\n  postRenewPassword,\r\n  postCheckSignUpCode,\r\n};\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useCreditCard.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\dictionaryAPI.ts",["463"],[],"import { instance } from \"@/apis/instance\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// 사용자 추천 카드 리스트 조회 API\r\nconst getAllCreditcard = async (time: string) => {\r\n  try {\r\n    const response = await instance.get(`/creditcard`, {\r\n      params: { time }, // time 매개변수를 쿼리 매개변수로 전달\r\n    });\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - getAllCreditcard\");\r\n  }\r\n};\r\n\r\n// 카드 상세 정보 조회 조회 API\r\nconst getCreditcard = async (cardId: number) => {\r\n  try {\r\n    const response = await instance.get(`/creditcard/${cardId}`);\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - getCreditcard\");\r\n  }\r\n};\r\n\r\n// 월간 소비 분석 API\r\nconst getAnalyticsMonth = async () => {\r\n  try {\r\n    const response = await instance.get(`/analytics/month`);\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - getAnalyticsMonth\");\r\n  }\r\n};\r\n\r\n// 조회 시작일과 종료일을 통해 유저의 챌린지 카드들을 조회\r\nconst getAllChallengeCard = async (startDate: string, endDate: string) => {\r\n  try {\r\n    const response = await instance.get(\r\n      `/card/challenge?startDate=${startDate}&endDate=${endDate}`\r\n    );\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - getAllChallengeCard\");\r\n  }\r\n};\r\n\r\n// 유저에게 할당되어 있는 챌린지카드와 챌린지를 연,월일을 통해 조회한다.\r\nconst getChallengeCard = async (id: number | null) => {\r\n  try {\r\n    const response = await instance.get(`/card/challenge/${id}`);\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - getChallengeCard\");\r\n  }\r\n};\r\n\r\nconst getConsume = async (id: number) => {\r\n  try {\r\n    const response = await instance.get(`/card/consume/${id}`);\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - getConsume\");\r\n  }\r\n};\r\n\r\nconst getAllConsume = async (startDate: string, endDate: string) => {\r\n  try {\r\n    const response = await instance.get(\r\n      `/card/consume?startDate=${startDate}&endDate=${endDate}`\r\n    );\r\n    return response.data;\r\n  } catch {\r\n    new Error(\"api 연동 오류 - getAllConsume\");\r\n  }\r\n};\r\n\r\nexport {\r\n  getAllCreditcard,\r\n  getCreditcard,\r\n  getAnalyticsMonth,\r\n  getChallengeCard,\r\n  getAllChallengeCard,\r\n  getConsume,\r\n  getAllConsume,\r\n};\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useAllCreditCard.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\menu\\Queries\\useFaqData.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\menu\\menuAPI.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\monthSpend\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostLogout.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\states\\userState.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostSignUp.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\verifyNumberModal\\index.tsx",["464"],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\main\\Mutations\\usePostConsume.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\main\\Mutations\\usePostSmsCheck.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\main\\Mutations\\usePostSms.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\main\\mainAPI.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\states\\dictionaryState.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useChallengeCard.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\Queries\\useAllUserFortune.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useGetAllConsume.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\menu\\Queries\\useUserInfo.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostGeneration.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostAlram.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\states\\spendState.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Queries\\useGetConsumeId.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Mutations\\usePostSSESendData.ts",[],[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Queries\\useGetConsumeRecent.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\spend\\Queries\\useGetSSESubscribe.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\router\\routes.tsx",["465","466","467","468","469","470"],[],"import React, { FC, useEffect, useState } from \"react\";\r\nimport { EventSourcePolyfill, NativeEventSource } from \"event-source-polyfill\";\r\nimport { Route, Routes, Navigate } from \"react-router-dom\";\r\nimport DashboardLayout from \"@/layouts/DashboardLayout\";\r\nimport LoadingPage from \"@/pages/loading\";\r\nimport { error } from \"console\";\r\n\r\ntype DashboardLayout = any;\r\n\r\ninterface RouteType {\r\n  path: string;\r\n  layout?: FC<DashboardLayout>;\r\n  element: React.LazyExoticComponent<FC>;\r\n}\r\n\r\nconst routes: RouteType[] = [\r\n  {\r\n    path: \"/\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/main\")),\r\n  },\r\n  {\r\n    path: \"/main\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/main\")),\r\n  },\r\n  {\r\n    path: \"/crystal\",\r\n    element: React.lazy(() => import(\"@/pages/crystalBall\")),\r\n  },\r\n  {\r\n    path: \"/profile\",\r\n    element: React.lazy(() => import(\"@/pages/profile\")),\r\n  },\r\n  {\r\n    path: \"/menu\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/menu\")),\r\n  },\r\n  {\r\n    path: \"/faq\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/faq\")),\r\n  },\r\n  {\r\n    path: \"/luck\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/luck\")),\r\n  },\r\n  {\r\n    path: \"/userluck\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/userLuck\")),\r\n  },\r\n  {\r\n    path: \"/luckcontent\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/luckContent\")),\r\n  },\r\n  {\r\n    path: \"/landing\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/landing\")),\r\n  },\r\n  {\r\n    path: \"/oauth/redirect\",\r\n    element: React.lazy(() => import(\"@/pages/redirect\")),\r\n  },\r\n  {\r\n    path: \"/dictionary\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/dictionary\")),\r\n  },\r\n  {\r\n    path: \"/userdictionary\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/nonUserDictionary\")),\r\n  },\r\n  {\r\n    path: \"/spend\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/spendPattern\")),\r\n  },\r\n  {\r\n    path: \"/next\",\r\n    element: React.lazy(() => import(\"@/pages/nextSpendPattern\")),\r\n  },\r\n  {\r\n    path: \"/card\",\r\n    layout: DashboardLayout,\r\n    element: React.lazy(() => import(\"@/pages/cardRecommend\")),\r\n  },\r\n  {\r\n    path: \"/loading\",\r\n    element: React.lazy(() => import(\"@/pages/loading\")),\r\n  },\r\n  // {\r\n  //   path: \"/\",\r\n  //   element: () => <Navigate replace to=\"/main\" />,\r\n  // },\r\n  {\r\n    path: \"/*\",\r\n    element: React.lazy(() => import(\"@/pages/404\")),\r\n  },\r\n];\r\n\r\nconst RenderRoutes = () => {\r\n  return (\r\n    <React.Suspense\r\n      fallback={\r\n        <div>\r\n          <LoadingPage />\r\n        </div>\r\n      }\r\n    >\r\n      <Routes>\r\n        {routes.map((route, i) => {\r\n          const RouteElement = route.element;\r\n          const RouteLayout = route.layout || React.Fragment;\r\n          //   const Guard = route.guard || React.Fragment;\r\n\r\n          return (\r\n            <Route\r\n              key={i}\r\n              path={route.path}\r\n              element={\r\n                <RouteLayout>\r\n                  <RouteElement />\r\n                </RouteLayout>\r\n              }\r\n            />\r\n          );\r\n        })}\r\n      </Routes>\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nexport default RenderRoutes;\r\n","C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\specialSelectModal\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\dictionary\\Queries\\useAllChallengeCard.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\menu\\Mutations\\useProfileImage.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\components\\settingGoals\\index.tsx",["471"],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\user\\Mutations\\usePostSetGoalAmount.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\apis\\luck\\Queries\\useUserFortune.ts",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\userLuck\\index.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\App.tsx",[],[],"C:\\Users\\SSAFY\\Desktop\\S09P22B308\\frontend\\src\\pages\\nonUserDictionary\\index.tsx",["472","473","474","475","476","477","478"],[],{"ruleId":"479","severity":1,"message":"480","line":10,"column":8,"nodeType":"481","messageId":"482","endLine":10,"endColumn":18},{"ruleId":"479","severity":1,"message":"483","line":1,"column":38,"nodeType":"481","messageId":"482","endLine":1,"endColumn":45},{"ruleId":"479","severity":1,"message":"484","line":1,"column":27,"nodeType":"481","messageId":"482","endLine":1,"endColumn":36},{"ruleId":"479","severity":1,"message":"485","line":25,"column":8,"nodeType":"481","messageId":"482","endLine":25,"endColumn":14},{"ruleId":"479","severity":1,"message":"486","line":33,"column":8,"nodeType":"481","messageId":"482","endLine":33,"endColumn":12},{"ruleId":"479","severity":1,"message":"487","line":9,"column":8,"nodeType":"481","messageId":"482","endLine":9,"endColumn":16},{"ruleId":"479","severity":1,"message":"488","line":259,"column":7,"nodeType":"481","messageId":"482","endLine":259,"endColumn":18},{"ruleId":"479","severity":1,"message":"489","line":268,"column":7,"nodeType":"481","messageId":"482","endLine":268,"endColumn":14},{"ruleId":"479","severity":1,"message":"490","line":304,"column":9,"nodeType":"481","messageId":"482","endLine":304,"endColumn":24},{"ruleId":"479","severity":1,"message":"491","line":339,"column":9,"nodeType":"481","messageId":"482","endLine":339,"endColumn":20},{"ruleId":"479","severity":1,"message":"492","line":79,"column":9,"nodeType":"481","messageId":"482","endLine":79,"endColumn":17},{"ruleId":"479","severity":1,"message":"493","line":60,"column":7,"nodeType":"481","messageId":"482","endLine":60,"endColumn":22},{"ruleId":"479","severity":1,"message":"494","line":67,"column":10,"nodeType":"481","messageId":"482","endLine":67,"endColumn":23},{"ruleId":"479","severity":1,"message":"495","line":218,"column":19,"nodeType":"481","messageId":"482","endLine":218,"endColumn":29},{"ruleId":"496","severity":2,"message":"497","line":208,"column":28,"nodeType":"498","messageId":"499","endLine":208,"endColumn":49,"suppressions":"500"},{"ruleId":"496","severity":2,"message":"501","line":208,"column":50,"nodeType":"498","messageId":"499","endLine":208,"endColumn":65,"suppressions":"502"},{"ruleId":"496","severity":2,"message":"503","line":369,"column":7,"nodeType":"498","messageId":"499","endLine":369,"endColumn":40,"suppressions":"504"},{"ruleId":"496","severity":2,"message":"505","line":371,"column":7,"nodeType":"498","messageId":"499","endLine":371,"endColumn":47,"suppressions":"506"},{"ruleId":"496","severity":2,"message":"507","line":373,"column":7,"nodeType":"498","messageId":"499","endLine":373,"endColumn":63,"suppressions":"508"},{"ruleId":"479","severity":1,"message":"483","line":4,"column":3,"nodeType":"481","messageId":"482","endLine":4,"endColumn":10},{"ruleId":"479","severity":1,"message":"509","line":66,"column":9,"nodeType":"481","messageId":"482","endLine":66,"endColumn":13},{"ruleId":"479","severity":1,"message":"510","line":267,"column":29,"nodeType":"481","messageId":"482","endLine":267,"endColumn":30},{"ruleId":"479","severity":1,"message":"511","line":1,"column":10,"nodeType":"481","messageId":"482","endLine":1,"endColumn":21},{"ruleId":"479","severity":1,"message":"512","line":359,"column":22,"nodeType":"481","messageId":"482","endLine":359,"endColumn":35},{"ruleId":"479","severity":1,"message":"513","line":37,"column":23,"nodeType":"481","messageId":"482","endLine":37,"endColumn":37},{"ruleId":"479","severity":1,"message":"514","line":38,"column":24,"nodeType":"481","messageId":"482","endLine":38,"endColumn":39},{"ruleId":"479","severity":1,"message":"515","line":3,"column":10,"nodeType":"481","messageId":"482","endLine":3,"endColumn":24},{"ruleId":"479","severity":1,"message":"516","line":4,"column":10,"nodeType":"481","messageId":"482","endLine":4,"endColumn":26},{"ruleId":"479","severity":1,"message":"517","line":13,"column":10,"nodeType":"481","messageId":"482","endLine":13,"endColumn":15},{"ruleId":"479","severity":1,"message":"518","line":2,"column":10,"nodeType":"481","messageId":"482","endLine":2,"endColumn":15},{"ruleId":"479","severity":1,"message":"519","line":144,"column":25,"nodeType":"481","messageId":"482","endLine":144,"endColumn":41},{"ruleId":"479","severity":1,"message":"484","line":1,"column":21,"nodeType":"481","messageId":"482","endLine":1,"endColumn":30},{"ruleId":"479","severity":1,"message":"520","line":1,"column":32,"nodeType":"481","messageId":"482","endLine":1,"endColumn":40},{"ruleId":"479","severity":1,"message":"521","line":2,"column":10,"nodeType":"481","messageId":"482","endLine":2,"endColumn":29},{"ruleId":"479","severity":1,"message":"522","line":2,"column":31,"nodeType":"481","messageId":"482","endLine":2,"endColumn":48},{"ruleId":"479","severity":1,"message":"523","line":3,"column":25,"nodeType":"481","messageId":"482","endLine":3,"endColumn":33},{"ruleId":"479","severity":1,"message":"517","line":6,"column":10,"nodeType":"481","messageId":"482","endLine":6,"endColumn":15},{"ruleId":"479","severity":1,"message":"494","line":92,"column":10,"nodeType":"481","messageId":"482","endLine":92,"endColumn":23},{"ruleId":"479","severity":1,"message":"484","line":1,"column":27,"nodeType":"481","messageId":"482","endLine":1,"endColumn":36},{"ruleId":"479","severity":1,"message":"524","line":13,"column":26,"nodeType":"481","messageId":"482","endLine":13,"endColumn":40},{"ruleId":"479","severity":1,"message":"525","line":17,"column":3,"nodeType":"481","messageId":"482","endLine":17,"endColumn":23},{"ruleId":"479","severity":1,"message":"485","line":23,"column":8,"nodeType":"481","messageId":"482","endLine":23,"endColumn":14},{"ruleId":"479","severity":1,"message":"526","line":24,"column":10,"nodeType":"481","messageId":"482","endLine":24,"endColumn":29},{"ruleId":"479","severity":1,"message":"486","line":32,"column":8,"nodeType":"481","messageId":"482","endLine":32,"endColumn":12},{"ruleId":"479","severity":1,"message":"527","line":146,"column":21,"nodeType":"481","messageId":"482","endLine":146,"endColumn":33},"@typescript-eslint/no-unused-vars","'AlertModal' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","'useEffect' is defined but never used.","'Lottie' is defined but never used.","'card' is defined but never used.","'CardFlip' is defined but never used.","'CardSection' is assigned a value but never used.","'CardBox' is assigned a value but never used.","'handleCardClick' is assigned a value but never used.","'isClickable' is assigned a value but never used.","'navigate' is assigned a value but never used.","'WeatherGradient' is assigned a value but never used.","'isSettingOpen' is assigned a value but never used.","'setIsColor' is assigned a value but never used.","react/no-unknown-property","Unknown property 'side' found","JSXAttribute","unknownProp",["528"],"Unknown property 'visible' found",["529"],"Unknown property 'onBeforeCompile' found",["530"],"Unknown property 'onUpdate' found",["531"],"Unknown property 'customProgramCacheKey' found",["532"],"'body' is assigned a value but never used.","'i' is defined but never used.","'useNavigate' is defined but never used.","'setSignUpInfo' is assigned a value but never used.","'setClickedCard' is assigned a value but never used.","'setDisableHover' is assigned a value but never used.","'useRecoilState' is defined but never used.","'nowDateInfoState' is defined but never used.","'error' is defined but never used.","'toast' is defined but never used.","'setIsTextEntered' is assigned a value but never used.","'useState' is defined but never used.","'EventSourcePolyfill' is defined but never used.","'NativeEventSource' is defined but never used.","'Navigate' is defined but never used.","'useRecoilValue' is defined but never used.","'specialImageUrlState' is defined but never used.","'useAllChallengeCard' is defined but never used.","'setSpecialId' is assigned a value but never used.",{"kind":"533","justification":"534"},{"kind":"533","justification":"534"},{"kind":"533","justification":"534"},{"kind":"533","justification":"534"},{"kind":"533","justification":"534"},"directive",""]