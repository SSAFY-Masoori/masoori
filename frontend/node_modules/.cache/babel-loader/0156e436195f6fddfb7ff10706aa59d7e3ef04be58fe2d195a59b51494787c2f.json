{"ast":null,"code":"/**\n * Fizzy UI utils v3.0.0\n * MIT license\n */\n\n(function (global, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(global);\n  } else {\n    // browser global\n    global.fizzyUIUtils = factory(global);\n  }\n})(this, function factory(global) {\n  let utils = {};\n\n  // ----- extend ----- //\n\n  // extends objects\n  utils.extend = function (a, b) {\n    return Object.assign(a, b);\n  };\n\n  // ----- modulo ----- //\n\n  utils.modulo = function (num, div) {\n    return (num % div + div) % div;\n  };\n\n  // ----- makeArray ----- //\n\n  // turn element or nodeList into an array\n  utils.makeArray = function (obj) {\n    // use object if already an array\n    if (Array.isArray(obj)) return obj;\n\n    // return empty array if undefined or null. #6\n    if (obj === null || obj === undefined) return [];\n    let isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';\n    // convert nodeList to array\n    if (isArrayLike) return [...obj];\n\n    // array of single index\n    return [obj];\n  };\n\n  // ----- removeFrom ----- //\n\n  utils.removeFrom = function (ary, obj) {\n    let index = ary.indexOf(obj);\n    if (index != -1) {\n      ary.splice(index, 1);\n    }\n  };\n\n  // ----- getParent ----- //\n\n  utils.getParent = function (elem, selector) {\n    while (elem.parentNode && elem != document.body) {\n      elem = elem.parentNode;\n      if (elem.matches(selector)) return elem;\n    }\n  };\n\n  // ----- getQueryElement ----- //\n\n  // use element as selector string\n  utils.getQueryElement = function (elem) {\n    if (typeof elem == 'string') {\n      return document.querySelector(elem);\n    }\n    return elem;\n  };\n\n  // ----- handleEvent ----- //\n\n  // enable .ontype to trigger from .addEventListener( elem, 'type' )\n  utils.handleEvent = function (event) {\n    let method = 'on' + event.type;\n    if (this[method]) {\n      this[method](event);\n    }\n  };\n\n  // ----- filterFindElements ----- //\n\n  utils.filterFindElements = function (elems, selector) {\n    // make array of elems\n    elems = utils.makeArray(elems);\n    return elems\n    // check that elem is an actual element\n    .filter(elem => elem instanceof HTMLElement).reduce((ffElems, elem) => {\n      // add elem if no selector\n      if (!selector) {\n        ffElems.push(elem);\n        return ffElems;\n      }\n      // filter & find items if we have a selector\n      // filter\n      if (elem.matches(selector)) {\n        ffElems.push(elem);\n      }\n      // find children\n      let childElems = elem.querySelectorAll(selector);\n      // concat childElems to filterFound array\n      ffElems = ffElems.concat(...childElems);\n      return ffElems;\n    }, []);\n  };\n\n  // ----- debounceMethod ----- //\n\n  utils.debounceMethod = function (_class, methodName, threshold) {\n    threshold = threshold || 100;\n    // original method\n    let method = _class.prototype[methodName];\n    let timeoutName = methodName + 'Timeout';\n    _class.prototype[methodName] = function () {\n      clearTimeout(this[timeoutName]);\n      let args = arguments;\n      this[timeoutName] = setTimeout(() => {\n        method.apply(this, args);\n        delete this[timeoutName];\n      }, threshold);\n    };\n  };\n\n  // ----- docReady ----- //\n\n  utils.docReady = function (onDocReady) {\n    let readyState = document.readyState;\n    if (readyState == 'complete' || readyState == 'interactive') {\n      // do async to allow for other scripts to run. metafizzy/flickity#441\n      setTimeout(onDocReady);\n    } else {\n      document.addEventListener('DOMContentLoaded', onDocReady);\n    }\n  };\n\n  // ----- htmlInit ----- //\n\n  // http://bit.ly/3oYLusc\n  utils.toDashed = function (str) {\n    return str.replace(/(.)([A-Z])/g, function (match, $1, $2) {\n      return $1 + '-' + $2;\n    }).toLowerCase();\n  };\n  let console = global.console;\n\n  // allow user to initialize classes via [data-namespace] or .js-namespace class\n  // htmlInit( Widget, 'widgetName' )\n  // options are parsed from data-namespace-options\n  utils.htmlInit = function (WidgetClass, namespace) {\n    utils.docReady(function () {\n      let dashedNamespace = utils.toDashed(namespace);\n      let dataAttr = 'data-' + dashedNamespace;\n      let dataAttrElems = document.querySelectorAll(`[${dataAttr}]`);\n      let jQuery = global.jQuery;\n      [...dataAttrElems].forEach(elem => {\n        let attr = elem.getAttribute(dataAttr);\n        let options;\n        try {\n          options = attr && JSON.parse(attr);\n        } catch (error) {\n          // log error, do not initialize\n          if (console) {\n            console.error(`Error parsing ${dataAttr} on ${elem.className}: ${error}`);\n          }\n          return;\n        }\n        // initialize\n        let instance = new WidgetClass(elem, options);\n        // make available via $().data('namespace')\n        if (jQuery) {\n          jQuery.data(elem, namespace, instance);\n        }\n      });\n    });\n  };\n\n  // -----  ----- //\n\n  return utils;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}