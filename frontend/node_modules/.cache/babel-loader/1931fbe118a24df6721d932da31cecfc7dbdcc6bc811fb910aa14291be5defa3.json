{"ast":null,"code":"// lazyload\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./core'), require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    factory(window.Flickity, window.fizzyUIUtils);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(Flickity, utils) {\n  const lazyAttr = 'data-flickity-lazyload';\n  const lazySrcAttr = `${lazyAttr}-src`;\n  const lazySrcsetAttr = `${lazyAttr}-srcset`;\n  const imgSelector = `img[${lazyAttr}], img[${lazySrcAttr}], ` + `img[${lazySrcsetAttr}], source[${lazySrcsetAttr}]`;\n  Flickity.create.lazyLoad = function () {\n    this.on('select', this.lazyLoad);\n    this.handleLazyLoadComplete = this.onLazyLoadComplete.bind(this);\n  };\n  let proto = Flickity.prototype;\n  proto.lazyLoad = function () {\n    let {\n      lazyLoad\n    } = this.options;\n    if (!lazyLoad) return;\n\n    // get adjacent cells, use lazyLoad option for adjacent count\n    let adjCount = typeof lazyLoad == 'number' ? lazyLoad : 0;\n    // lazy load images\n    this.getAdjacentCellElements(adjCount).map(getCellLazyImages).flat().forEach(img => new LazyLoader(img, this.handleLazyLoadComplete));\n  };\n  function getCellLazyImages(cellElem) {\n    // check if cell element is lazy image\n    if (cellElem.matches('img')) {\n      let cellAttr = cellElem.getAttribute(lazyAttr);\n      let cellSrcAttr = cellElem.getAttribute(lazySrcAttr);\n      let cellSrcsetAttr = cellElem.getAttribute(lazySrcsetAttr);\n      if (cellAttr || cellSrcAttr || cellSrcsetAttr) {\n        return cellElem;\n      }\n    }\n    // select lazy images in cell\n    return [...cellElem.querySelectorAll(imgSelector)];\n  }\n  proto.onLazyLoadComplete = function (img, event) {\n    let cell = this.getParentCell(img);\n    let cellElem = cell && cell.element;\n    this.cellSizeChange(cellElem);\n    this.dispatchEvent('lazyLoad', event, cellElem);\n  };\n\n  // -------------------------- LazyLoader -------------------------- //\n\n  /**\n   * class to handle loading images\n   * @param {Image} img - Image element\n   * @param {Function} onComplete - callback function\n   */\n  function LazyLoader(img, onComplete) {\n    this.img = img;\n    this.onComplete = onComplete;\n    this.load();\n  }\n  LazyLoader.prototype.handleEvent = utils.handleEvent;\n  LazyLoader.prototype.load = function () {\n    this.img.addEventListener('load', this);\n    this.img.addEventListener('error', this);\n    // get src & srcset\n    let src = this.img.getAttribute(lazyAttr) || this.img.getAttribute(lazySrcAttr);\n    let srcset = this.img.getAttribute(lazySrcsetAttr);\n    // set src & serset\n    this.img.src = src;\n    if (srcset) this.img.setAttribute('srcset', srcset);\n    // remove attr\n    this.img.removeAttribute(lazyAttr);\n    this.img.removeAttribute(lazySrcAttr);\n    this.img.removeAttribute(lazySrcsetAttr);\n  };\n  LazyLoader.prototype.onload = function (event) {\n    this.complete(event, 'flickity-lazyloaded');\n  };\n  LazyLoader.prototype.onerror = function (event) {\n    this.complete(event, 'flickity-lazyerror');\n  };\n  LazyLoader.prototype.complete = function (event, className) {\n    // unbind events\n    this.img.removeEventListener('load', this);\n    this.img.removeEventListener('error', this);\n    let mediaElem = this.img.parentNode.matches('picture') ? this.img.parentNode : this.img;\n    mediaElem.classList.add(className);\n    this.onComplete(this.img, event);\n  };\n\n  // -----  ----- //\n\n  Flickity.LazyLoader = LazyLoader;\n  return Flickity;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}