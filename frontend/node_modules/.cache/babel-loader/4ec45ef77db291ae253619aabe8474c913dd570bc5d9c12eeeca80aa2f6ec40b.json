{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoilPersist = void 0;\n/**\n * Recoil module to persist state to storage\n *\n * @param config Optional configuration object\n * @param config.key Used as key in local storage, defaults to `recoil-persist`\n * @param config.storage Local storage to use, defaults to `localStorage`\n */\nconst recoilPersist = (config = {}) => {\n  if (typeof window === 'undefined') {\n    return {\n      persistAtom: () => {}\n    };\n  }\n  const {\n    key = 'recoil-persist',\n    storage = localStorage,\n    converter = JSON\n  } = config;\n  const persistAtom = ({\n    onSet,\n    node,\n    trigger,\n    setSelf\n  }) => {\n    if (trigger === 'get') {\n      const state = getState();\n      if (typeof state.then === 'function') {\n        state.then(s => {\n          if (s.hasOwnProperty(node.key)) {\n            setSelf(s[node.key]);\n          }\n        });\n      }\n      if (state.hasOwnProperty(node.key)) {\n        setSelf(state[node.key]);\n      }\n    }\n    onSet(async (newValue, _, isReset) => {\n      const state = getState();\n      if (typeof state.then === 'function') {\n        state.then(s => updateState(newValue, s, node.key, isReset));\n      } else {\n        updateState(newValue, state, node.key, isReset);\n      }\n    });\n  };\n  const updateState = (newValue, state, key, isReset) => {\n    if (isReset) {\n      delete state[key];\n    } else {\n      state[key] = newValue;\n    }\n    setState(state);\n  };\n  const getState = () => {\n    const toParse = storage.getItem(key);\n    if (toParse === null || toParse === undefined) {\n      return {};\n    }\n    if (typeof toParse === 'string') {\n      return parseState(toParse);\n    }\n    if (typeof toParse.then === 'function') {\n      return toParse.then(parseState);\n    }\n    return {};\n  };\n  const parseState = state => {\n    if (state === undefined) {\n      return {};\n    }\n    try {\n      return converter.parse(state);\n    } catch (e) {\n      console.error(e);\n      return {};\n    }\n  };\n  const setState = state => {\n    try {\n      if (typeof storage.mergeItem === 'function') {\n        storage.mergeItem(key, converter.stringify(state));\n      } else {\n        storage.setItem(key, converter.stringify(state));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  return {\n    persistAtom\n  };\n};\nexports.recoilPersist = recoilPersist;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}