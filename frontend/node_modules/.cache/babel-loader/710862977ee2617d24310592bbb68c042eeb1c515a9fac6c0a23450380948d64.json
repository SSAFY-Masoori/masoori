{"ast":null,"code":"// add, remove cell\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./core'), require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    factory(window.Flickity, window.fizzyUIUtils);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(Flickity, utils) {\n  // append cells to a document fragment\n  function getCellsFragment(cells) {\n    let fragment = document.createDocumentFragment();\n    cells.forEach(cell => fragment.appendChild(cell.element));\n    return fragment;\n  }\n\n  // -------------------------- add/remove cell prototype -------------------------- //\n\n  let proto = Flickity.prototype;\n\n  /**\n   * Insert, prepend, or append cells\n   * @param {[Element, Array, NodeList]} elems - Elements to insert\n   * @param {Integer} index - Zero-based number to insert\n   */\n  proto.insert = function (elems, index) {\n    let cells = this._makeCells(elems);\n    if (!cells || !cells.length) return;\n    let len = this.cells.length;\n    // default to append\n    index = index === undefined ? len : index;\n    // add cells with document fragment\n    let fragment = getCellsFragment(cells);\n    // append to slider\n    let isAppend = index === len;\n    if (isAppend) {\n      this.slider.appendChild(fragment);\n    } else {\n      let insertCellElement = this.cells[index].element;\n      this.slider.insertBefore(fragment, insertCellElement);\n    }\n    // add to this.cells\n    if (index === 0) {\n      // prepend, add to start\n      this.cells = cells.concat(this.cells);\n    } else if (isAppend) {\n      // append, add to end\n      this.cells = this.cells.concat(cells);\n    } else {\n      // insert in this.cells\n      let endCells = this.cells.splice(index, len - index);\n      this.cells = this.cells.concat(cells).concat(endCells);\n    }\n    this._sizeCells(cells);\n    this.cellChange(index);\n    this.positionSliderAtSelected();\n  };\n  proto.append = function (elems) {\n    this.insert(elems, this.cells.length);\n  };\n  proto.prepend = function (elems) {\n    this.insert(elems, 0);\n  };\n\n  /**\n   * Remove cells\n   * @param {[Element, Array, NodeList]} elems - ELements to remove\n   */\n  proto.remove = function (elems) {\n    let cells = this.getCells(elems);\n    if (!cells || !cells.length) return;\n    let minCellIndex = this.cells.length - 1;\n    // remove cells from collection & DOM\n    cells.forEach(cell => {\n      cell.remove();\n      let index = this.cells.indexOf(cell);\n      minCellIndex = Math.min(index, minCellIndex);\n      utils.removeFrom(this.cells, cell);\n    });\n    this.cellChange(minCellIndex);\n    this.positionSliderAtSelected();\n  };\n\n  /**\n   * logic to be run after a cell's size changes\n   * @param {Element} elem - cell's element\n   */\n  proto.cellSizeChange = function (elem) {\n    let cell = this.getCell(elem);\n    if (!cell) return;\n    cell.getSize();\n    let index = this.cells.indexOf(cell);\n    this.cellChange(index);\n    // do not position slider after lazy load\n  };\n\n  /**\n   * logic any time a cell is changed: added, removed, or size changed\n   * @param {Integer} changedCellIndex - index of the changed cell, optional\n   */\n  proto.cellChange = function (changedCellIndex) {\n    let prevSelectedElem = this.selectedElement;\n    this._positionCells(changedCellIndex);\n    this._updateWrapShiftCells();\n    this.setGallerySize();\n    // update selectedIndex, try to maintain position & select previous selected element\n    let cell = this.getCell(prevSelectedElem);\n    if (cell) this.selectedIndex = this.getCellSlideIndex(cell);\n    this.selectedIndex = Math.min(this.slides.length - 1, this.selectedIndex);\n    this.emitEvent('cellChange', [changedCellIndex]);\n    // position slider\n    this.select(this.selectedIndex);\n  };\n\n  // -----  ----- //\n\n  return Flickity;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}