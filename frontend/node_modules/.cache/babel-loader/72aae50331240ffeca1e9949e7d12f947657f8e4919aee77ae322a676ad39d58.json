{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SSAFY\\\\Desktop\\\\S09P22B308\\\\frontend\\\\src\\\\components\\\\cardFlip\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useSpring, a } from \"@react-spring/web\";\nimport styled from \"styled-components\";\nimport TarotCard from \"@/components/tarotCard\";\nimport tarotCardFront from \"@/assets/img/tarotCard/tarotCardFront.png\";\nimport cardBack from \"@/assets/img/cardBack.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardContainer = styled(a.div)`\n  position: absolute;\n  max-width: 500px;\n  max-height: 500px;\n  width: 265px;\n  height: 400px;\n  cursor: pointer;\n  border-radius: 10px;\n  margin-left: -9%;\n  margin-top: 2%;\n  will-change: transform, opacity;\n`;\nconst Back = styled(CardContainer)`\n  background-size: cover;\n  background-image: url(${cardBack});\n`;\n_c = Back;\nconst Front = styled(CardContainer)``;\n_c2 = Front;\nconst CardFlip = ({\n  onClick,\n  isClickable = true,\n  imageSrc = \"\",\n  text = \"\"\n}) => {\n  _s();\n  const [flipped, setFlipped] = useState(false);\n  const {\n    transform,\n    opacity\n  } = useSpring({\n    opacity: flipped ? 1 : 0,\n    transform: `perspective(600px) rotateY(${flipped ? 180 : 0}deg)`,\n    config: {\n      mass: 5,\n      tension: 500,\n      friction: 80\n    }\n  });\n  const handleClick = () => {\n    if (isClickable && !flipped) {\n      setFlipped(true);\n      if (onClick) {\n        onClick();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Back, {\n      style: {\n        opacity: opacity.to(o => 1 - o),\n        transform\n      },\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Front, {\n      style: {\n        opacity,\n        transform,\n        rotateY: \"180deg\"\n      },\n      onClick: handleClick,\n      children: /*#__PURE__*/_jsxDEV(TarotCard, {\n        width: \"265px\",\n        height: \"355px\",\n        cardWidth: \"100%\",\n        cardSrc: tarotCardFront,\n        imageSrc: imageSrc,\n        bottomImageWidth: \"100%\",\n        text: text,\n        fontsize: \"20px\",\n        bottom: \"0.8rem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(CardFlip, \"MzLSWlKKR7V3kdIYeTSH6OzmfnQ=\", false, function () {\n  return [useSpring];\n});\n_c3 = CardFlip;\nexport default CardFlip;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Back\");\n$RefreshReg$(_c2, \"Front\");\n$RefreshReg$(_c3, \"CardFlip\");","map":{"version":3,"names":["React","useState","useSpring","a","styled","TarotCard","tarotCardFront","cardBack","jsxDEV","_jsxDEV","CardContainer","div","Back","_c","Front","_c2","CardFlip","onClick","isClickable","imageSrc","text","_s","flipped","setFlipped","transform","opacity","config","mass","tension","friction","handleClick","children","style","to","o","fileName","_jsxFileName","lineNumber","columnNumber","rotateY","width","height","cardWidth","cardSrc","bottomImageWidth","fontsize","bottom","_c3","$RefreshReg$"],"sources":["C:/Users/SSAFY/Desktop/S09P22B308/frontend/src/components/cardFlip/index.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useSpring, a } from \"@react-spring/web\";\r\nimport styled from \"styled-components\";\r\nimport TarotCard from \"@/components/tarotCard\";\r\n\r\nimport tarotCardFront from \"@/assets/img/tarotCard/tarotCardFront.png\";\r\nimport cardBack from \"@/assets/img/cardBack.png\";\r\n\r\nconst CardContainer = styled(a.div)`\r\n  position: absolute;\r\n  max-width: 500px;\r\n  max-height: 500px;\r\n  width: 265px;\r\n  height: 400px;\r\n  cursor: pointer;\r\n  border-radius: 10px;\r\n  margin-left: -9%;\r\n  margin-top: 2%;\r\n  will-change: transform, opacity;\r\n`;\r\n\r\nconst Back = styled(CardContainer)`\r\n  background-size: cover;\r\n  background-image: url(${cardBack});\r\n`;\r\n\r\nconst Front = styled(CardContainer)``;\r\n\r\ninterface CardFlipProps {\r\n  onClick?: () => void;\r\n  isClickable?: boolean;\r\n  imageSrc?: string;\r\n  text?: string;\r\n}\r\n\r\nconst CardFlip = ({\r\n  onClick,\r\n  isClickable = true,\r\n  imageSrc = \"\",\r\n  text = \"\",\r\n}: CardFlipProps) => {\r\n  const [flipped, setFlipped] = useState(false);\r\n\r\n  const { transform, opacity } = useSpring({\r\n    opacity: flipped ? 1 : 0,\r\n    transform: `perspective(600px) rotateY(${flipped ? 180 : 0}deg)`,\r\n    config: { mass: 5, tension: 500, friction: 80 },\r\n  });\r\n\r\n  const handleClick = () => {\r\n    if (isClickable && !flipped) {\r\n      setFlipped(true);\r\n      if (onClick) {\r\n        onClick();\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Back\r\n        style={{\r\n          opacity: opacity.to((o) => 1 - o),\r\n          transform,\r\n        }}\r\n        onClick={handleClick}\r\n      />\r\n      <Front\r\n        style={{\r\n          opacity,\r\n          transform,\r\n          rotateY: \"180deg\",\r\n        }}\r\n        onClick={handleClick}\r\n      >\r\n        <TarotCard\r\n          width=\"265px\"\r\n          height=\"355px\"\r\n          cardWidth=\"100%\"\r\n          cardSrc={tarotCardFront}\r\n          imageSrc={imageSrc}\r\n          bottomImageWidth=\"100%\"\r\n          text={text}\r\n          fontsize=\"20px\"\r\n          bottom=\"0.8rem\"\r\n        ></TarotCard>\r\n      </Front>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardFlip;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}