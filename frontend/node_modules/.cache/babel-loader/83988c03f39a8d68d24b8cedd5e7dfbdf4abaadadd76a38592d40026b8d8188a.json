{"ast":null,"code":"// page dots\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./core'), require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    factory(window.Flickity, window.fizzyUIUtils);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(Flickity, utils) {\n  // -------------------------- PageDots -------------------------- //\n\n  function PageDots() {\n    // create holder element\n    this.holder = document.createElement('div');\n    this.holder.className = 'flickity-page-dots';\n    // create dots, array of elements\n    this.dots = [];\n  }\n  PageDots.prototype.setDots = function (slidesLength) {\n    // get difference between number of slides and number of dots\n    let delta = slidesLength - this.dots.length;\n    if (delta > 0) {\n      this.addDots(delta);\n    } else if (delta < 0) {\n      this.removeDots(-delta);\n    }\n  };\n  PageDots.prototype.addDots = function (count) {\n    let newDots = new Array(count).fill().map((item, i) => {\n      let dot = document.createElement('button');\n      dot.setAttribute('type', 'button');\n      let num = i + 1 + this.dots.length;\n      dot.className = 'flickity-page-dot';\n      dot.textContent = `View slide ${num}`;\n      return dot;\n    });\n    this.holder.append(...newDots);\n    this.dots = this.dots.concat(newDots);\n  };\n  PageDots.prototype.removeDots = function (count) {\n    // remove from this.dots collection\n    let removeDots = this.dots.splice(this.dots.length - count, count);\n    // remove from DOM\n    removeDots.forEach(dot => dot.remove());\n  };\n  PageDots.prototype.updateSelected = function (index) {\n    // remove selected class on previous\n    if (this.selectedDot) {\n      this.selectedDot.classList.remove('is-selected');\n      this.selectedDot.removeAttribute('aria-current');\n    }\n    // don't proceed if no dots\n    if (!this.dots.length) return;\n    this.selectedDot = this.dots[index];\n    this.selectedDot.classList.add('is-selected');\n    this.selectedDot.setAttribute('aria-current', 'step');\n  };\n  Flickity.PageDots = PageDots;\n\n  // -------------------------- Flickity -------------------------- //\n\n  Object.assign(Flickity.defaults, {\n    pageDots: true\n  });\n  Flickity.create.pageDots = function () {\n    if (!this.options.pageDots) return;\n    this.pageDots = new PageDots();\n    this.handlePageDotsClick = this.onPageDotsClick.bind(this);\n    // events\n    this.on('activate', this.activatePageDots);\n    this.on('select', this.updateSelectedPageDots);\n    this.on('cellChange', this.updatePageDots);\n    this.on('resize', this.updatePageDots);\n    this.on('deactivate', this.deactivatePageDots);\n  };\n  let proto = Flickity.prototype;\n  proto.activatePageDots = function () {\n    this.pageDots.setDots(this.slides.length);\n    this.focusableElems.push(...this.pageDots.dots);\n    this.pageDots.holder.addEventListener('click', this.handlePageDotsClick);\n    this.element.append(this.pageDots.holder);\n  };\n  proto.onPageDotsClick = function (event) {\n    let index = this.pageDots.dots.indexOf(event.target);\n    if (index === -1) return; // only dot clicks\n\n    this.uiChange();\n    this.select(index);\n  };\n  proto.updateSelectedPageDots = function () {\n    this.pageDots.updateSelected(this.selectedIndex);\n  };\n  proto.updatePageDots = function () {\n    this.pageDots.dots.forEach(dot => {\n      utils.removeFrom(this.focusableElems, dot);\n    });\n    this.pageDots.setDots(this.slides.length);\n    this.focusableElems.push(...this.pageDots.dots);\n  };\n  proto.deactivatePageDots = function () {\n    this.pageDots.holder.remove();\n    this.pageDots.holder.removeEventListener('click', this.handlePageDotsClick);\n  };\n\n  // -----  ----- //\n\n  Flickity.PageDots = PageDots;\n  return Flickity;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}