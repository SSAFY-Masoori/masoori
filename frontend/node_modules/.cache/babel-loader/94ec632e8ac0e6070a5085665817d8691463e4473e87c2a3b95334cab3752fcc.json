{"ast":null,"code":"import React, { useRef, useState, useImperativeHandle, useCallback, useEffect } from 'react';\nimport { PageFlip } from 'page-flip';\nconst HTMLFlipBookForward = React.forwardRef((props, ref) => {\n  const htmlElementRef = useRef(null);\n  const childRef = useRef([]);\n  const pageFlip = useRef();\n  const [pages, setPages] = useState([]);\n  useImperativeHandle(ref, () => ({\n    pageFlip: () => pageFlip.current\n  }));\n  const refreshOnPageDelete = useCallback(() => {\n    if (pageFlip.current) {\n      pageFlip.current.clear();\n    }\n  }, []);\n  const removeHandlers = useCallback(() => {\n    const flip = pageFlip.current;\n    if (flip) {\n      flip.off('flip');\n      flip.off('changeOrientation');\n      flip.off('changeState');\n      flip.off('init');\n      flip.off('update');\n    }\n  }, []);\n  useEffect(() => {\n    childRef.current = [];\n    if (props.children) {\n      const childList = React.Children.map(props.children, child => {\n        return React.cloneElement(child, {\n          ref: dom => {\n            if (dom) {\n              childRef.current.push(dom);\n            }\n          }\n        });\n      });\n      if (!props.renderOnlyPageLengthChange || pages.length !== childList.length) {\n        if (childList.length < pages.length) {\n          refreshOnPageDelete();\n        }\n        setPages(childList);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.children]);\n  useEffect(() => {\n    const setHandlers = () => {\n      const flip = pageFlip.current;\n      if (flip) {\n        if (props.onFlip) {\n          flip.on('flip', e => props.onFlip(e));\n        }\n        if (props.onChangeOrientation) {\n          flip.on('changeOrientation', e => props.onChangeOrientation(e));\n        }\n        if (props.onChangeState) {\n          flip.on('changeState', e => props.onChangeState(e));\n        }\n        if (props.onInit) {\n          flip.on('init', e => props.onInit(e));\n        }\n        if (props.onUpdate) {\n          flip.on('update', e => props.onUpdate(e));\n        }\n      }\n    };\n    if (pages.length > 0 && childRef.current.length > 0) {\n      removeHandlers();\n      if (htmlElementRef.current && !pageFlip.current) {\n        pageFlip.current = new PageFlip(htmlElementRef.current, props);\n      }\n      if (!pageFlip.current.getFlipController()) {\n        pageFlip.current.loadFromHTML(childRef.current);\n      } else {\n        pageFlip.current.updateFromHtml(childRef.current);\n      }\n      setHandlers();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pages]);\n  return React.createElement(\"div\", {\n    ref: htmlElementRef,\n    className: props.className,\n    style: props.style\n  }, pages);\n});\nconst HTMLFlipBook = React.memo(HTMLFlipBookForward);\nexport default HTMLFlipBook;\n//# sourceMappingURL=index.es.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}