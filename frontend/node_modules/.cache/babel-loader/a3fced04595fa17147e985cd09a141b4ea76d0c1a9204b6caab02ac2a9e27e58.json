{"ast":null,"code":"// prev/next buttons\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./core'));\n  } else {\n    // browser global\n    factory(window.Flickity);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(Flickity) {\n  const svgURI = 'http://www.w3.org/2000/svg';\n\n  // -------------------------- PrevNextButton -------------------------- //\n\n  function PrevNextButton(increment, direction, arrowShape) {\n    this.increment = increment;\n    this.direction = direction;\n    this.isPrevious = increment === 'previous';\n    this.isLeft = direction === 'left';\n    this._create(arrowShape);\n  }\n  PrevNextButton.prototype._create = function (arrowShape) {\n    // properties\n    let element = this.element = document.createElement('button');\n    element.className = `flickity-button flickity-prev-next-button ${this.increment}`;\n    let label = this.isPrevious ? 'Previous' : 'Next';\n    // prevent button from submitting form https://stackoverflow.com/a/10836076/182183\n    element.setAttribute('type', 'button');\n    element.setAttribute('aria-label', label);\n    // init as disabled\n    this.disable();\n    // create arrow\n    let svg = this.createSVG(label, arrowShape);\n    element.append(svg);\n  };\n  PrevNextButton.prototype.createSVG = function (label, arrowShape) {\n    let svg = document.createElementNS(svgURI, 'svg');\n    svg.setAttribute('class', 'flickity-button-icon');\n    svg.setAttribute('viewBox', '0 0 100 100');\n    // add title #1189\n    let title = document.createElementNS(svgURI, 'title');\n    title.append(label);\n    // add path\n    let path = document.createElementNS(svgURI, 'path');\n    let pathMovements = getArrowMovements(arrowShape);\n    path.setAttribute('d', pathMovements);\n    path.setAttribute('class', 'arrow');\n    // rotate arrow\n    if (!this.isLeft) {\n      path.setAttribute('transform', 'translate(100, 100) rotate(180)');\n    }\n    svg.append(title, path);\n    return svg;\n  };\n\n  // get SVG path movmement\n  function getArrowMovements(shape) {\n    // use shape as movement if string\n    if (typeof shape == 'string') return shape;\n    let {\n      x0,\n      x1,\n      x2,\n      x3,\n      y1,\n      y2\n    } = shape;\n\n    // create movement string\n    return `M ${x0}, 50\n    L ${x1}, ${y1 + 50}\n    L ${x2}, ${y2 + 50}\n    L ${x3}, 50\n    L ${x2}, ${50 - y2}\n    L ${x1}, ${50 - y1}\n    Z`;\n  }\n\n  // -----  ----- //\n\n  PrevNextButton.prototype.enable = function () {\n    this.element.removeAttribute('disabled');\n  };\n  PrevNextButton.prototype.disable = function () {\n    this.element.setAttribute('disabled', true);\n  };\n\n  // -------------------------- Flickity prototype -------------------------- //\n\n  Object.assign(Flickity.defaults, {\n    prevNextButtons: true,\n    arrowShape: {\n      x0: 10,\n      x1: 60,\n      y1: 50,\n      x2: 70,\n      y2: 40,\n      x3: 30\n    }\n  });\n  Flickity.create.prevNextButtons = function () {\n    if (!this.options.prevNextButtons) return;\n    let {\n      rightToLeft,\n      arrowShape\n    } = this.options;\n    let prevDirection = rightToLeft ? 'right' : 'left';\n    let nextDirection = rightToLeft ? 'left' : 'right';\n    this.prevButton = new PrevNextButton('previous', prevDirection, arrowShape);\n    this.nextButton = new PrevNextButton('next', nextDirection, arrowShape);\n    this.focusableElems.push(this.prevButton.element);\n    this.focusableElems.push(this.nextButton.element);\n    this.handlePrevButtonClick = () => {\n      this.uiChange();\n      this.previous();\n    };\n    this.handleNextButtonClick = () => {\n      this.uiChange();\n      this.next();\n    };\n    this.on('activate', this.activatePrevNextButtons);\n    this.on('select', this.updatePrevNextButtons);\n  };\n  let proto = Flickity.prototype;\n  proto.updatePrevNextButtons = function () {\n    let lastIndex = this.slides.length ? this.slides.length - 1 : 0;\n    this.updatePrevNextButton(this.prevButton, 0);\n    this.updatePrevNextButton(this.nextButton, lastIndex);\n  };\n  proto.updatePrevNextButton = function (button, disabledIndex) {\n    // enable is wrapAround and at least 2 slides\n    if (this.isWrapping && this.slides.length > 1) {\n      button.enable();\n      return;\n    }\n    let isEnabled = this.selectedIndex !== disabledIndex;\n    button[isEnabled ? 'enable' : 'disable']();\n    // if disabling button that is focused,\n    // shift focus to element to maintain keyboard accessibility\n    let isDisabledFocused = !isEnabled && document.activeElement === button.element;\n    if (isDisabledFocused) this.focus();\n  };\n  proto.activatePrevNextButtons = function () {\n    this.prevButton.element.addEventListener('click', this.handlePrevButtonClick);\n    this.nextButton.element.addEventListener('click', this.handleNextButtonClick);\n    this.element.append(this.prevButton.element, this.nextButton.element);\n    this.on('deactivate', this.deactivatePrevNextButtons);\n  };\n  proto.deactivatePrevNextButtons = function () {\n    this.prevButton.element.remove();\n    this.nextButton.element.remove();\n    this.prevButton.element.removeEventListener('click', this.handlePrevButtonClick);\n    this.nextButton.element.removeEventListener('click', this.handleNextButtonClick);\n    this.off('deactivate', this.deactivatePrevNextButtons);\n  };\n\n  // --------------------------  -------------------------- //\n\n  Flickity.PrevNextButton = PrevNextButton;\n  return Flickity;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}