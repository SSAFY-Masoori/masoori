{"ast":null,"code":"// player & autoPlay\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./core'));\n  } else {\n    // browser global\n    factory(window.Flickity);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(Flickity) {\n  // -------------------------- Player -------------------------- //\n\n  function Player(autoPlay, onTick) {\n    this.autoPlay = autoPlay;\n    this.onTick = onTick;\n    this.state = 'stopped';\n    // visibility change event handler\n    this.onVisibilityChange = this.visibilityChange.bind(this);\n    this.onVisibilityPlay = this.visibilityPlay.bind(this);\n  }\n\n  // start play\n  Player.prototype.play = function () {\n    if (this.state === 'playing') return;\n\n    // do not play if page is hidden, start playing when page is visible\n    let isPageHidden = document.hidden;\n    if (isPageHidden) {\n      document.addEventListener('visibilitychange', this.onVisibilityPlay);\n      return;\n    }\n    this.state = 'playing';\n    // listen to visibility change\n    document.addEventListener('visibilitychange', this.onVisibilityChange);\n    // start ticking\n    this.tick();\n  };\n  Player.prototype.tick = function () {\n    // do not tick if not playing\n    if (this.state !== 'playing') return;\n\n    // default to 3 seconds\n    let time = typeof this.autoPlay == 'number' ? this.autoPlay : 3000;\n    // HACK: reset ticks if stopped and started within interval\n    this.clear();\n    this.timeout = setTimeout(() => {\n      this.onTick();\n      this.tick();\n    }, time);\n  };\n  Player.prototype.stop = function () {\n    this.state = 'stopped';\n    this.clear();\n    // remove visibility change event\n    document.removeEventListener('visibilitychange', this.onVisibilityChange);\n  };\n  Player.prototype.clear = function () {\n    clearTimeout(this.timeout);\n  };\n  Player.prototype.pause = function () {\n    if (this.state === 'playing') {\n      this.state = 'paused';\n      this.clear();\n    }\n  };\n  Player.prototype.unpause = function () {\n    // re-start play if paused\n    if (this.state === 'paused') this.play();\n  };\n\n  // pause if page visibility is hidden, unpause if visible\n  Player.prototype.visibilityChange = function () {\n    let isPageHidden = document.hidden;\n    this[isPageHidden ? 'pause' : 'unpause']();\n  };\n  Player.prototype.visibilityPlay = function () {\n    this.play();\n    document.removeEventListener('visibilitychange', this.onVisibilityPlay);\n  };\n\n  // -------------------------- Flickity -------------------------- //\n\n  Object.assign(Flickity.defaults, {\n    pauseAutoPlayOnHover: true\n  });\n  Flickity.create.player = function () {\n    this.player = new Player(this.options.autoPlay, () => {\n      this.next(true);\n    });\n    this.on('activate', this.activatePlayer);\n    this.on('uiChange', this.stopPlayer);\n    this.on('pointerDown', this.stopPlayer);\n    this.on('deactivate', this.deactivatePlayer);\n  };\n  let proto = Flickity.prototype;\n  proto.activatePlayer = function () {\n    if (!this.options.autoPlay) return;\n    this.player.play();\n    this.element.addEventListener('mouseenter', this);\n  };\n\n  // Player API, don't hate the ... thanks I know where the door is\n\n  proto.playPlayer = function () {\n    this.player.play();\n  };\n  proto.stopPlayer = function () {\n    this.player.stop();\n  };\n  proto.pausePlayer = function () {\n    this.player.pause();\n  };\n  proto.unpausePlayer = function () {\n    this.player.unpause();\n  };\n  proto.deactivatePlayer = function () {\n    this.player.stop();\n    this.element.removeEventListener('mouseenter', this);\n  };\n\n  // ----- mouseenter/leave ----- //\n\n  // pause auto-play on hover\n  proto.onmouseenter = function () {\n    if (!this.options.pauseAutoPlayOnHover) return;\n    this.player.pause();\n    this.element.addEventListener('mouseleave', this);\n  };\n\n  // resume auto-play on hover off\n  proto.onmouseleave = function () {\n    this.player.unpause();\n    this.element.removeEventListener('mouseleave', this);\n  };\n\n  // -----  ----- //\n\n  Flickity.Player = Player;\n  return Flickity;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}