{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SSAFY\\\\Desktop\\\\S09P22B308\\\\frontend\\\\src\\\\pages\\\\crystalBall\\\\index.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, Suspense, useEffect } from \"react\";\nimport { Sphere, OrbitControls, Box, useTexture, Environment } from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { a as aw } from \"@react-spring/web\";\nimport { a as a3, useSpring as useSpringThree } from \"@react-spring/three\";\nimport * as THREE from \"three\";\nimport styled from \"styled-components\";\nimport AlertModal from \"@/components/alertModal\";\nimport { useLuckyColor } from \"@/apis/luck/Queries/useLuckyColor\";\nimport { useRecoilState } from \"recoil\";\nimport { ColorInfoState } from \"@/states/luckState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5); /* Semi-transparent black background */\n  display: ${props => props.isOpen ? \"block\" : \"none\"};\n  z-index: 5;\n`;\n\n// Create a modal container\n_c = Backdrop;\nconst ModalContainer = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 20px;\n  display: ${props => props.isOpen ? \"block\" : \"none\"};\n  z-index: 8;\n`;\n_c2 = ModalContainer;\nconst options = {\n  RED: [0, 100, 50],\n  // 빨간색\n  ORANGE: [30, 100, 50],\n  // 주황색\n  YELLOW: [60, 100, 50],\n  // 노란색\n  GREEN: [120, 100, 50],\n  // 초록색\n  BLUE: [240, 100, 50],\n  // 파란색\n  NAVY: [200, 70, 60],\n  // 남색\n  PURPLE: [270, 100, 50],\n  // 보라색\n  PINK: [330, 100, 50],\n  // 분홍색\n  BROWN: [30, 70, 25],\n  // 갈색\n  WHITE: [0, 0, 100],\n  // 흰색\n  GRAY: [0, 0, 40],\n  // 회색\n  OLIVE: [60, 100, 50],\n  // 올리브색\n  SKYBLUE: [200, 70, 60],\n  // 하늘색\n  MINT: [150, 100, 50] // 민트색\n};\n\nconst CrystalBallPage = () => {\n  _s();\n  const [step, setStep] = useState(0);\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 열림 여부 상태\n  const [isColor, setIsColor] = useRecoilState(ColorInfoState);\n  const colorInfo = useLuckyColor();\n  useEffect(() => {\n    if (isColor.colorName === \"\") {\n      setIsColor(colorInfo);\n    }\n  }, [colorInfo, setIsColor, isColor]);\n\n  // 모달 열기 함수\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  // 모달 닫기 함수\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const {\n    opacity\n  } = useSpring({\n    opacity: step === 0 ? 0 : 1\n  });\n  return (\n    /*#__PURE__*/\n    // position: fixed;\n    // top: 50%;\n    // left: 50%;\n    // transform: translate(-50%, -50%);\n    // padding: 20px;\n    // display: \"block\";\n    // z-index: 2;\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Backdrop, {\n        isOpen: isModalOpen,\n        onClick: closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(aw.div, {\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          position: \"fixed\",\n          top: \"0%\",\n          left: \"0%\",\n          display: \"block\",\n          background: \"radial-gradient(#4d0d3f, transparent)\",\n          zIndex: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(Canvas, {\n          camera: {\n            position: [0, 0, 2]\n          },\n          children: /*#__PURE__*/_jsxDEV(Suspense, {\n            fallback: null,\n            children: [/*#__PURE__*/_jsxDEV(OrbitControls, {\n              autoRotate: true,\n              enableRotate: false,\n              enablePan: false,\n              enableZoom: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Marble, {\n              step: step,\n              setStep: setStep,\n              openModal: openModal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Environment, {\n              preset: \"warehouse\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ModalContainer, {\n          isOpen: isModalOpen,\n          children: /*#__PURE__*/_jsxDEV(AlertModal, {\n            width: \"550px\",\n            topText: `Lucky ${isColor.colorName}`,\n            middleText: `${isColor.description}`,\n            bottomText: \"\\uBA54\\uC778\\uC73C\\uB85C \\uB3CC\\uC544\\uAC00\\uAE30\",\n            imageUrl: `${isColor.imagePath}`,\n            topTextColor: `${isColor.color}`,\n            middleTextColor: \"#5E3A66\",\n            bottomTextColor: \"#EAE2ED\",\n            upperSectionBackground: \"#EAE2ED\",\n            lowerSectionBackground: \"#5E3A66\",\n            topTextFontSize: \"28px\",\n            middleTextFontSize: \"14px\",\n            bottomTextFontSize: \"20px\",\n            topTextPaddingTopBottom: \"2px\",\n            middleTextPaddingTopBottom: \"20px\",\n            middleTextPaddingLeftRight: \"20px\",\n            topTextFontWeight: \"bold\",\n            middleTextFontWeight: \"medium\",\n            bottomTextFontWeight: \"medium\",\n            routerLink: \"/main\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n};\n_s(CrystalBallPage, \"EbOnanoNw0xBNIgV67GfSoCycM4=\", true, function () {\n  return [useRecoilState, useLuckyColor];\n});\n_c3 = CrystalBallPage;\nconst Marble = ({\n  step,\n  setStep,\n  openModal\n}) => {\n  _s2();\n  const [hover, setHover] = useState(false);\n  const [tap, setTap] = useState(false);\n  const {\n    scale\n  } = useSpringThree({\n    scale: tap && hover ? 0.95 : 1,\n    opacity: step === 0 ? 0 : 1,\n    // Initially set opacity to 0, and gradually increase it when step is not 0\n    config: {\n      friction: 15,\n      tension: 300\n    }\n  });\n\n  // 구체 클릭 이벤트 핸들러\n  const handleSphereClick = () => {\n    setStep(step + 1); // 스텝 증가\n    setTimeout(() => {\n      openModal(); // 모달 열기\n    }, 1000); // 1000 밀리초(1초) 후에 함수 실행\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(a3.group, {\n      scale: scale,\n      onPointerEnter: () => setHover(true),\n      onPointerOut: () => setHover(false),\n      onClick: handleSphereClick,\n      children: /*#__PURE__*/_jsxDEV(Sphere, {\n        args: [1, 64, 32],\n        children: /*#__PURE__*/_jsxDEV(MagicMarbleMaterial, {\n          step: step,\n          roughness: 0.1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      args: [100, 100, 100],\n      onPointerDown: () => setTap(true),\n      onPointerUp: () => setTap(false),\n      children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        side: THREE.BackSide,\n        visible: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s2(Marble, \"sS2iplf8cPR5f4lGT61eGZzBIG4=\", false, function () {\n  return [useSpringThree];\n});\n_c4 = Marble;\nconst MagicMarbleMaterial = ({\n  step,\n  ...props\n}) => {\n  _s3();\n  const [isColor, setIsColor] = useRecoilState(ColorInfoState);\n\n  // Load the noise textures\n  const heightMap = useTexture(\"noise.jpg\");\n  const displacementMap = useTexture(\"noise3D.jpg\");\n  heightMap.minFilter = displacementMap.minFilter = THREE.NearestFilter;\n  displacementMap.wrapS = displacementMap.wrapT = THREE.RepeatWrapping;\n\n  // Create persistent local uniforms object\n  const [uniforms] = useState(() => ({\n    time: {\n      value: 0\n    },\n    colorA: {\n      value: new THREE.Color(0, 0, 0)\n    },\n    colorB: {\n      value: new THREE.Color(0, 0, 0)\n    },\n    heightMap: {\n      value: heightMap\n    },\n    displacementMap: {\n      value: displacementMap\n    },\n    iterations: {\n      value: 48\n    },\n    depth: {\n      value: 0.6\n    },\n    smoothing: {\n      value: 0.2\n    },\n    displacement: {\n      value: 0.1\n    }\n  }));\n\n  // This spring value allows us to \"fast forward\" the displacement in the marble\n  const {\n    timeOffset\n  } = useSpringThree({\n    hsl: options[isColor.colorName],\n    // 스텝에 따라 옵션에서 색상 가져오기\n    timeOffset: step * 0.2,\n    config: {\n      tension: 50\n    },\n    onChange: ({\n      value: {\n        hsl\n      }\n    }) => {\n      const [h, s, l] = hsl;\n      uniforms.colorB.value.setHSL(h / 360, s / 100, l / 100);\n    }\n  });\n\n  // Update time uniform on each frame\n  useFrame(({\n    clock\n  }) => {\n    uniforms.time.value = timeOffset.get() + clock.elapsedTime * 0.05;\n  });\n\n  // Add our custom bits to the MeshStandardMaterial\n  const onBeforeCompile = shader => {\n    // Wire up local uniform references\n    shader.uniforms = {\n      ...shader.uniforms,\n      ...uniforms\n    };\n\n    // Add to top of vertex shader\n    shader.vertexShader = /* glsl */`\n      varying vec3 v_pos;\n      varying vec3 v_dir;\n    ` + shader.vertexShader;\n\n    // Assign values to varyings inside of main()\n    shader.vertexShader = shader.vertexShader.replace(/void main\\(\\) {/, match => match + /* glsl */`\n        v_dir = position - cameraPosition; // Points from camera to vertex\n        v_pos = position;\n        `);\n\n    // Add to top of fragment shader\n    shader.fragmentShader = /* glsl */`\n      #define FLIP vec2(1., -1.)\n      \n      uniform vec3 colorA;\n      uniform vec3 colorB;\n      uniform sampler2D heightMap;\n      uniform sampler2D displacementMap;\n      uniform int iterations;\n      uniform float depth;\n      uniform float smoothing;\n      uniform float displacement;\n      uniform float time;\n      \n      varying vec3 v_pos;\n      varying vec3 v_dir;\n    ` + shader.fragmentShader;\n\n    // Add above fragment shader main() so we can access common.glsl.js\n    shader.fragmentShader = shader.fragmentShader.replace(/void main\\(\\) {/, match => /* glsl */`\n       \t/**\n         * @param p - Point to displace\n         * @param strength - How much the map can displace the point\n         * @returns Point with scrolling displacement applied\n         */\n        vec3 displacePoint(vec3 p, float strength) {\n        \tvec2 uv = equirectUv(normalize(p));\n          vec2 scroll = vec2(time, 0.);\n          vec3 displacementA = texture(displacementMap, uv + scroll).rgb; // Upright\n\t\t\t\t\tvec3 displacementB = texture(displacementMap, uv * FLIP - scroll).rgb; // Upside down\n          \n          // Center the range to [-0.5, 0.5], note the range of their sum is [-1, 1]\n          displacementA -= 0.5;\n          displacementB -= 0.5;\n          \n          return p + strength * (displacementA + displacementB);\n        }\n        \n\t\t\t\t/**\n          * @param rayOrigin - Point on sphere\n          * @param rayDir - Normalized ray direction\n          * @returns Diffuse RGB color\n          */\n        vec3 marchMarble(vec3 rayOrigin, vec3 rayDir) {\n          float perIteration = 1. / float(iterations);\n          vec3 deltaRay = rayDir * perIteration * depth;\n\n          // Start at point of intersection and accumulate volume\n          vec3 p = rayOrigin;\n          float totalVolume = 0.;\n\n          for (int i=0; i<iterations; ++i) {\n            // Read heightmap from spherical direction of displaced ray position\n            vec3 displaced = displacePoint(p, displacement);\n            vec2 uv = equirectUv(normalize(displaced));\n            float heightMapVal = texture(heightMap, uv).r;\n\n            // Take a slice of the heightmap\n            float height = length(p); // 1 at surface, 0 at core, assuming radius = 1\n            float cutoff = 1. - float(i) * perIteration;\n            float slice = smoothstep(cutoff, cutoff + smoothing, heightMapVal);\n\n            // Accumulate the volume and advance the ray forward one step\n            totalVolume += slice * perIteration;\n            p += deltaRay;\n          }\n          return mix(colorA, colorB, totalVolume);\n        }\n      ` + match);\n    shader.fragmentShader = shader.fragmentShader.replace(/vec4 diffuseColor.*;/, /* glsl */`\n      vec3 rayDir = normalize(v_dir);\n      vec3 rayOrigin = v_pos;\n      \n      vec3 rgb = marchMarble(rayOrigin, rayDir);\n      vec4 diffuseColor = vec4(rgb, 1.);      \n      `);\n  };\n  return /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n    ...props,\n    // eslint-disable-next-line react/no-unknown-property\n    onBeforeCompile: onBeforeCompile\n    // eslint-disable-next-line react/no-unknown-property\n    ,\n    onUpdate: m => m.needsUpdate = true\n    // eslint-disable-next-line react/no-unknown-property\n    ,\n    customProgramCacheKey: () => onBeforeCompile.toString()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 360,\n    columnNumber: 5\n  }, this);\n};\n_s3(MagicMarbleMaterial, \"/70CZSrfVevZhOVGTDVU0v/cKgU=\", false, function () {\n  return [useRecoilState, useTexture, useTexture, useSpringThree, useFrame];\n});\n_c5 = MagicMarbleMaterial;\nexport default CrystalBallPage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Backdrop\");\n$RefreshReg$(_c2, \"ModalContainer\");\n$RefreshReg$(_c3, \"CrystalBallPage\");\n$RefreshReg$(_c4, \"Marble\");\n$RefreshReg$(_c5, \"MagicMarbleMaterial\");","map":{"version":3,"names":["useState","Suspense","useEffect","Sphere","OrbitControls","Box","useTexture","Environment","Canvas","useFrame","a","aw","a3","useSpring","useSpringThree","THREE","styled","AlertModal","useLuckyColor","useRecoilState","ColorInfoState","jsxDEV","_jsxDEV","Fragment","_Fragment","Backdrop","div","props","isOpen","_c","ModalContainer","_c2","options","RED","ORANGE","YELLOW","GREEN","BLUE","NAVY","PURPLE","PINK","BROWN","WHITE","GRAY","OLIVE","SKYBLUE","MINT","CrystalBallPage","_s","step","setStep","isModalOpen","setIsModalOpen","isColor","setIsColor","colorInfo","colorName","openModal","closeModal","opacity","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","position","top","left","display","background","zIndex","camera","fallback","autoRotate","enableRotate","enablePan","enableZoom","Marble","preset","topText","middleText","description","bottomText","imageUrl","imagePath","topTextColor","color","middleTextColor","bottomTextColor","upperSectionBackground","lowerSectionBackground","topTextFontSize","middleTextFontSize","bottomTextFontSize","topTextPaddingTopBottom","middleTextPaddingTopBottom","middleTextPaddingLeftRight","topTextFontWeight","middleTextFontWeight","bottomTextFontWeight","routerLink","_c3","_s2","hover","setHover","tap","setTap","scale","config","friction","tension","handleSphereClick","setTimeout","group","onPointerEnter","onPointerOut","args","MagicMarbleMaterial","roughness","onPointerDown","onPointerUp","side","BackSide","visible","_c4","_s3","heightMap","displacementMap","minFilter","NearestFilter","wrapS","wrapT","RepeatWrapping","uniforms","time","value","colorA","Color","colorB","iterations","depth","smoothing","displacement","timeOffset","hsl","onChange","h","s","l","setHSL","clock","get","elapsedTime","onBeforeCompile","shader","vertexShader","replace","match","fragmentShader","onUpdate","m","needsUpdate","customProgramCacheKey","toString","_c5","$RefreshReg$"],"sources":["C:/Users/SSAFY/Desktop/S09P22B308/frontend/src/pages/crystalBall/index.tsx"],"sourcesContent":["import { useState, Suspense, useEffect } from \"react\";\r\nimport {\r\n  Sphere,\r\n  OrbitControls,\r\n  Box,\r\n  useTexture,\r\n  Environment,\r\n} from \"@react-three/drei\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\nimport { a as aw, useSpring as useSpringWeb } from \"@react-spring/web\";\r\nimport { a as a3, useSpring as useSpringThree } from \"@react-spring/three\";\r\nimport * as THREE from \"three\";\r\nimport styled from \"styled-components\";\r\nimport AlertModal from \"@/components/alertModal\";\r\nimport { useLuckyColor } from \"@/apis/luck/Queries/useLuckyColor\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { ColorInfoState } from \"@/states/luckState\";\r\n\r\ninterface MagicMarbleMaterialProps\r\n  extends THREE.MeshStandardMaterialParameters {\r\n  step: number;\r\n}\r\n\r\nconst Backdrop = styled.div<{ isOpen: boolean }>`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5); /* Semi-transparent black background */\r\n  display: ${(props) => (props.isOpen ? \"block\" : \"none\")};\r\n  z-index: 5;\r\n`;\r\n\r\n// Create a modal container\r\nconst ModalContainer = styled.div<{ isOpen: boolean }>`\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  padding: 20px;\r\n  display: ${(props) => (props.isOpen ? \"block\" : \"none\")};\r\n  z-index: 8;\r\n`;\r\n\r\ninterface ColorOptions {\r\n  [key: string]: number[]; // 인덱스 시그니처 추가\r\n}\r\n\r\nconst options: ColorOptions = {\r\n  RED: [0, 100, 50], // 빨간색\r\n  ORANGE: [30, 100, 50], // 주황색\r\n  YELLOW: [60, 100, 50], // 노란색\r\n  GREEN: [120, 100, 50], // 초록색\r\n  BLUE: [240, 100, 50], // 파란색\r\n  NAVY: [200, 70, 60], // 남색\r\n  PURPLE: [270, 100, 50], // 보라색\r\n  PINK: [330, 100, 50], // 분홍색\r\n  BROWN: [30, 70, 25], // 갈색\r\n  WHITE: [0, 0, 100], // 흰색\r\n  GRAY: [0, 0, 40], // 회색\r\n  OLIVE: [60, 100, 50], // 올리브색\r\n  SKYBLUE: [200, 70, 60], // 하늘색\r\n  MINT: [150, 100, 50], // 민트색\r\n};\r\n\r\nconst CrystalBallPage = () => {\r\n  const [step, setStep] = useState(0);\r\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 열림 여부 상태\r\n  const [isColor, setIsColor] = useRecoilState(ColorInfoState);\r\n  const colorInfo = useLuckyColor();\r\n\r\n  useEffect(() => {\r\n    if (isColor.colorName === \"\") {\r\n      setIsColor(colorInfo);\r\n    }\r\n  }, [colorInfo, setIsColor, isColor]);\r\n\r\n  // 모달 열기 함수\r\n  const openModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  // 모달 닫기 함수\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n  const { opacity } = useSpring({\r\n    opacity: step === 0 ? 0 : 1,\r\n  });\r\n\r\n  return (\r\n    // position: fixed;\r\n    // top: 50%;\r\n    // left: 50%;\r\n    // transform: translate(-50%, -50%);\r\n    // padding: 20px;\r\n    // display: \"block\";\r\n    // z-index: 2;\r\n    <>\r\n      {/* 모달 렌더링 */}\r\n      <Backdrop isOpen={isModalOpen} onClick={closeModal} />\r\n      <aw.div\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          position: \"fixed\",\r\n          top: \"0%\",\r\n          left: \"0%\",\r\n          display: \"block\",\r\n          background: \"radial-gradient(#4d0d3f, transparent)\",\r\n          zIndex: 5,\r\n        }}\r\n      >\r\n        <Canvas camera={{ position: [0, 0, 2] }}>\r\n          <Suspense fallback={null}>\r\n            <OrbitControls\r\n              autoRotate\r\n              enableRotate={false}\r\n              enablePan={false}\r\n              enableZoom={false}\r\n            />\r\n            <Marble step={step} setStep={setStep} openModal={openModal} />\r\n            <Environment preset=\"warehouse\" />\r\n          </Suspense>\r\n        </Canvas>\r\n\r\n        <ModalContainer isOpen={isModalOpen}>\r\n          <AlertModal\r\n            width=\"550px\"\r\n            topText={`Lucky ${isColor.colorName}`}\r\n            middleText={`${isColor.description}`}\r\n            bottomText=\"메인으로 돌아가기\"\r\n            imageUrl={`${isColor.imagePath}`}\r\n            topTextColor={`${isColor.color}`}\r\n            middleTextColor=\"#5E3A66\"\r\n            bottomTextColor=\"#EAE2ED\"\r\n            upperSectionBackground=\"#EAE2ED\"\r\n            lowerSectionBackground=\"#5E3A66\"\r\n            topTextFontSize=\"28px\"\r\n            middleTextFontSize=\"14px\"\r\n            bottomTextFontSize=\"20px\"\r\n            topTextPaddingTopBottom=\"2px\"\r\n            middleTextPaddingTopBottom=\"20px\"\r\n            middleTextPaddingLeftRight=\"20px\"\r\n            topTextFontWeight=\"bold\"\r\n            middleTextFontWeight=\"medium\"\r\n            bottomTextFontWeight=\"medium\"\r\n            routerLink=\"/main\"\r\n          />\r\n        </ModalContainer>\r\n      </aw.div>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface MarbleProps {\r\n  step: number;\r\n  setStep: (step: number) => void;\r\n  openModal: () => void; // openModal 함수가 어떤 인자도 받지 않음\r\n}\r\n\r\nconst Marble: React.FC<MarbleProps> = ({ step, setStep, openModal }) => {\r\n  const [hover, setHover] = useState(false);\r\n  const [tap, setTap] = useState(false);\r\n  const { scale } = useSpringThree({\r\n    scale: tap && hover ? 0.95 : 1,\r\n    opacity: step === 0 ? 0 : 1, // Initially set opacity to 0, and gradually increase it when step is not 0\r\n    config: {\r\n      friction: 15,\r\n      tension: 300,\r\n    },\r\n  });\r\n\r\n  // 구체 클릭 이벤트 핸들러\r\n  const handleSphereClick = () => {\r\n    setStep(step + 1); // 스텝 증가\r\n    setTimeout(() => {\r\n      openModal(); // 모달 열기\r\n    }, 1000); // 1000 밀리초(1초) 후에 함수 실행\r\n  };\r\n\r\n  return (\r\n    <group>\r\n      <a3.group\r\n        scale={scale}\r\n        onPointerEnter={() => setHover(true)}\r\n        onPointerOut={() => setHover(false)}\r\n        onClick={handleSphereClick}\r\n      >\r\n        <Sphere args={[1, 64, 32]}>\r\n          <MagicMarbleMaterial step={step} roughness={0.1} />\r\n        </Sphere>\r\n      </a3.group>\r\n      {/* This big invisible box is just a pointer target so we can reliably track if the mouse button is up or down */}\r\n      <Box\r\n        args={[100, 100, 100]}\r\n        onPointerDown={() => setTap(true)}\r\n        onPointerUp={() => setTap(false)}\r\n      >\r\n        {/* eslint-disable-next-line react/no-unknown-property */}\r\n        <meshBasicMaterial side={THREE.BackSide} visible={false} />\r\n      </Box>\r\n    </group>\r\n  );\r\n};\r\n\r\nconst MagicMarbleMaterial: React.FC<MagicMarbleMaterialProps> = ({\r\n  step,\r\n  ...props\r\n}) => {\r\n  const [isColor, setIsColor] = useRecoilState(ColorInfoState);\r\n\r\n  // Load the noise textures\r\n  const heightMap = useTexture(\"noise.jpg\");\r\n  const displacementMap = useTexture(\"noise3D.jpg\");\r\n  heightMap.minFilter = displacementMap.minFilter = THREE.NearestFilter;\r\n  displacementMap.wrapS = displacementMap.wrapT = THREE.RepeatWrapping;\r\n\r\n  // Create persistent local uniforms object\r\n  const [uniforms] = useState(() => ({\r\n    time: { value: 0 },\r\n    colorA: { value: new THREE.Color(0, 0, 0) },\r\n    colorB: { value: new THREE.Color(0, 0, 0) },\r\n    heightMap: { value: heightMap },\r\n    displacementMap: { value: displacementMap },\r\n    iterations: { value: 48 },\r\n    depth: { value: 0.6 },\r\n    smoothing: { value: 0.2 },\r\n    displacement: { value: 0.1 },\r\n  }));\r\n\r\n  // This spring value allows us to \"fast forward\" the displacement in the marble\r\n  const { timeOffset } = useSpringThree({\r\n    hsl: options[isColor.colorName], // 스텝에 따라 옵션에서 색상 가져오기\r\n    timeOffset: step * 0.2,\r\n    config: { tension: 50 },\r\n    onChange: ({ value: { hsl } }) => {\r\n      const [h, s, l] = hsl;\r\n      uniforms.colorB.value.setHSL(h / 360, s / 100, l / 100);\r\n    },\r\n  });\r\n\r\n  // Update time uniform on each frame\r\n  useFrame(({ clock }) => {\r\n    uniforms.time.value = timeOffset.get() + clock.elapsedTime * 0.05;\r\n  });\r\n\r\n  // Add our custom bits to the MeshStandardMaterial\r\n  const onBeforeCompile = (shader: THREE.Shader) => {\r\n    // Wire up local uniform references\r\n    shader.uniforms = { ...shader.uniforms, ...uniforms };\r\n\r\n    // Add to top of vertex shader\r\n    shader.vertexShader =\r\n      /* glsl */ `\r\n      varying vec3 v_pos;\r\n      varying vec3 v_dir;\r\n    ` + shader.vertexShader;\r\n\r\n    // Assign values to varyings inside of main()\r\n    shader.vertexShader = shader.vertexShader.replace(\r\n      /void main\\(\\) {/,\r\n      (match) =>\r\n        match +\r\n        /* glsl */ `\r\n        v_dir = position - cameraPosition; // Points from camera to vertex\r\n        v_pos = position;\r\n        `\r\n    );\r\n\r\n    // Add to top of fragment shader\r\n    shader.fragmentShader =\r\n      /* glsl */ `\r\n      #define FLIP vec2(1., -1.)\r\n      \r\n      uniform vec3 colorA;\r\n      uniform vec3 colorB;\r\n      uniform sampler2D heightMap;\r\n      uniform sampler2D displacementMap;\r\n      uniform int iterations;\r\n      uniform float depth;\r\n      uniform float smoothing;\r\n      uniform float displacement;\r\n      uniform float time;\r\n      \r\n      varying vec3 v_pos;\r\n      varying vec3 v_dir;\r\n    ` + shader.fragmentShader;\r\n\r\n    // Add above fragment shader main() so we can access common.glsl.js\r\n    shader.fragmentShader = shader.fragmentShader.replace(\r\n      /void main\\(\\) {/,\r\n      (match) =>\r\n        /* glsl */ `\r\n       \t/**\r\n         * @param p - Point to displace\r\n         * @param strength - How much the map can displace the point\r\n         * @returns Point with scrolling displacement applied\r\n         */\r\n        vec3 displacePoint(vec3 p, float strength) {\r\n        \tvec2 uv = equirectUv(normalize(p));\r\n          vec2 scroll = vec2(time, 0.);\r\n          vec3 displacementA = texture(displacementMap, uv + scroll).rgb; // Upright\r\n\t\t\t\t\tvec3 displacementB = texture(displacementMap, uv * FLIP - scroll).rgb; // Upside down\r\n          \r\n          // Center the range to [-0.5, 0.5], note the range of their sum is [-1, 1]\r\n          displacementA -= 0.5;\r\n          displacementB -= 0.5;\r\n          \r\n          return p + strength * (displacementA + displacementB);\r\n        }\r\n        \r\n\t\t\t\t/**\r\n          * @param rayOrigin - Point on sphere\r\n          * @param rayDir - Normalized ray direction\r\n          * @returns Diffuse RGB color\r\n          */\r\n        vec3 marchMarble(vec3 rayOrigin, vec3 rayDir) {\r\n          float perIteration = 1. / float(iterations);\r\n          vec3 deltaRay = rayDir * perIteration * depth;\r\n\r\n          // Start at point of intersection and accumulate volume\r\n          vec3 p = rayOrigin;\r\n          float totalVolume = 0.;\r\n\r\n          for (int i=0; i<iterations; ++i) {\r\n            // Read heightmap from spherical direction of displaced ray position\r\n            vec3 displaced = displacePoint(p, displacement);\r\n            vec2 uv = equirectUv(normalize(displaced));\r\n            float heightMapVal = texture(heightMap, uv).r;\r\n\r\n            // Take a slice of the heightmap\r\n            float height = length(p); // 1 at surface, 0 at core, assuming radius = 1\r\n            float cutoff = 1. - float(i) * perIteration;\r\n            float slice = smoothstep(cutoff, cutoff + smoothing, heightMapVal);\r\n\r\n            // Accumulate the volume and advance the ray forward one step\r\n            totalVolume += slice * perIteration;\r\n            p += deltaRay;\r\n          }\r\n          return mix(colorA, colorB, totalVolume);\r\n        }\r\n      ` + match\r\n    );\r\n\r\n    shader.fragmentShader = shader.fragmentShader.replace(\r\n      /vec4 diffuseColor.*;/,\r\n      /* glsl */ `\r\n      vec3 rayDir = normalize(v_dir);\r\n      vec3 rayOrigin = v_pos;\r\n      \r\n      vec3 rgb = marchMarble(rayOrigin, rayDir);\r\n      vec4 diffuseColor = vec4(rgb, 1.);      \r\n      `\r\n    );\r\n  };\r\n\r\n  return (\r\n    <meshStandardMaterial\r\n      {...props}\r\n      // eslint-disable-next-line react/no-unknown-property\r\n      onBeforeCompile={onBeforeCompile}\r\n      // eslint-disable-next-line react/no-unknown-property\r\n      onUpdate={(m) => (m.needsUpdate = true)}\r\n      // eslint-disable-next-line react/no-unknown-property\r\n      customProgramCacheKey={() => onBeforeCompile.toString()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CrystalBallPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}